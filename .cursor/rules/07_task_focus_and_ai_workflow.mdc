---
description: task focus and ai workflow
globs: 
alwaysApply: false
---

# 7. Follow task boundaries and maintain focused workflow

## 7.1. Maintain strict focus on the requested task only
- Stay focused on the specific task requested
- Resist the urge to refactor unrelated code
- Make minimal changes needed to accomplish the goal

### 7.1.1. Confine all changes strictly within the requested scope
   - Understand the exact boundaries of the requested change
   - Work within those boundaries without drifting

   #### 7.1.1.1. Make changes only within the explicit boundaries of the request
   ```python
   # Request: Fix bug where user email validation allows invalid formats
   
   # Original function
   def validate_user_email(email):
       """Validate user email format."""
       return "@" in email  # Bug: this validation is too permissive
   
   # Focused fix
   def validate_user_email(email):
       """Validate user email format."""
       # More robust validation using regex
       return bool(re.match(r"[^@]+@[^@]+\.[^@]+", email))
   ```

   #### 7.1.1.2. Never introduce unrelated changes when addressing a specific issue
   ```python
   # Request: Fix bug where user email validation allows invalid formats
   
   # Unfocused approach with unrelated changes
   def validate_user_email(email):
       """Validate user email format."""
       # Email validation fix
       is_valid = bool(re.match(r"[^@]+@[^@]+\.[^@]+", email))
       
       # Unrelated changes:
       # Added logging that wasn't requested
       logging.info(f"Validating email: {email}, result: {is_valid}")
       
       # Added caching that wasn't requested
       cache.set(f"email_valid:{email}", is_valid, timeout=3600)
       
       # Added new feature that wasn't requested
       if is_valid and not user_exists(email):
           suggest_registration(email)
           
       return is_valid
   ```

   #### 7.1.1.3. Resist adding unrequested improvements that extend beyond task scope
   - **DON'T**: Add "improvements" that weren't requested
   - **DON'T**: Refactor code structure beyond the task scope
   - **DO**: Ask for permission before making broader changes
   - **DO**: Focus solely on the specific task requested

### 7.1.2. Implement changes incrementally with minimal impact
   - Make one logical change at a time
   - Keep changes small and reviewable

   #### 7.1.2.1. Make focused changes that address only the specific requirement
   ```python
   # Request: Add user account status check to the login function
   
   # Original function
   def login(username, password):
       """Authenticate user login."""
       user = find_user(username)
       if not user or not verify_password(user, password):
           return LoginResult(success=False, error="Invalid credentials")
       return LoginResult(success=True, user_id=user.id)
   
   # Focused change
   def login(username, password):
       """Authenticate user login."""
       user = find_user(username)
       if not user or not verify_password(user, password):
           return LoginResult(success=False, error="Invalid credentials")
       
       # Only adding the requested account status check
       if user.status != "active":
           return LoginResult(success=False, error="Account is not active")
           
       return LoginResult(success=True, user_id=user.id)
   ```

   #### 7.1.2.2. Avoid bundling multiple logical changes in a single implementation
   ```python
   # Request: Add user account status check to the login function
   
   # Unfocused approach with multiple unrelated changes
   def login(username, password):
       """Authenticate user login with enhanced security."""  # Changed docstring
       # Added sanitization that wasn't requested
       username = sanitize_input(username)
       
       # Restructured the function flow unnecessarily
       if not username or not password:
           log_security_event("Empty credentials attempt")  # Added logging
           return LoginResult(success=False, error="Credentials required")
       
       # Changed error message wording without being asked
       user = find_user(username)
       if not user:
           return LoginResult(success=False, error="Username not recognized")
           
       # Added account lockout feature that wasn't requested
       if user.failed_attempts > 3:
           lock_account(user.id)
           return LoginResult(success=False, error="Account locked")
       
       if not verify_password(user, password):
           increment_failed_attempts(user.id)  # Added tracking
           return LoginResult(success=False, error="Password incorrect")
       
       # The only requested change
       if user.status != "active":
           return LoginResult(success=False, error="Account is not active")
           
       # Added unrequested tracking
       update_last_login(user.id)
       return LoginResult(success=True, user_id=user.id)
   ```

   #### 7.1.2.3. Keep solutions simple and avoid overengineering beyond requirements
   - **DON'T**: Rewrite entire functions when a small change would suffice
   - **DON'T**: Change function signatures or return types unnecessarily
   - **DO**: Preserve existing behavior for all use cases not related to the task
   - **DO**: Maintain the same coding style and patterns as the original code

### 7.1.3. Preserve existing interfaces and ensure backward compatibility
   - Don't change function signatures unless explicitly requested
   - Maintain backward compatibility

   #### 7.1.3.1. Maintain existing parameters and return types unless changes are requested
   ```python
   # Request: Add optional timeout parameter to the fetch_data function
   
   # Original function
   def fetch_data(url):
       """Fetch data from the specified URL."""
       response = requests.get(url)
       return response.json()
   
   # Focused change - adding optional parameter with default value
   def fetch_data(url, timeout=30):
       """Fetch data from the specified URL."""
       response = requests.get(url, timeout=timeout)
       return response.json()
   ```

   #### 7.1.3.2. Never change interfaces or function contracts without explicit instruction
   ```python
   # Request: Add optional timeout parameter to the fetch_data function
   
   # Breaking change that modifies the interface unnecessarily
   def fetch_data(url, config=None):
       """Fetch data from the specified URL."""
       # Changed parameter from simple timeout to a config dictionary
       config = config or {}
       timeout = config.get('timeout', 30)
       retries = config.get('retries', 3)  # Added unrequested feature
       
       # Changed return format without being asked
       try:
           response = requests.get(url, timeout=timeout)
           return {
               'success': True,
               'data': response.json(),
               'status': response.status_code
           }
       except Exception as e:
           return {
               'success': False,
               'error': str(e)
           }
   ```

   #### 7.1.3.3. Prevent subtle interface changes that break existing functionality
   - **DON'T**: Change parameter names, types, or order unless requested
   - **DON'T**: Modify return types or structures without explicit instructions
   - **DO**: Use optional parameters with sensible defaults for new features
   - **DO**: Maintain backward compatibility with existing code

### 7.1.4. Match existing code style and patterns precisely
   - Match the existing code style
   - Don't introduce new patterns unnecessarily

   #### 7.1.4.1. Follow established coding patterns in the existing codebase
   ```python
   # Existing code using a specific error handling pattern
   def process_user(user_id):
       """Process a user record."""
       user = get_user(user_id)
       if not user:
           logger.warning(f"User {user_id} not found")
           return False
       # Process user...
       return True
   
   # New function following the same pattern
   def process_order(order_id):
       """Process an order record."""
       order = get_order(order_id)
       if not order:
           logger.warning(f"Order {order_id} not found")
           return False
       # Process order...
       return True
   ```

   #### 7.1.4.2. Avoid introducing new coding styles or inconsistent approaches
   ```python
   # Existing code using a specific error handling pattern
   def process_user(user_id):
       """Process a user record."""
       user = get_user(user_id)
       if not user:
           logger.warning(f"User {user_id} not found")
           return False
       # Process user...
       return True
   
   # New function using a different error handling pattern
   def process_order(order_id):
       """Process an order record."""
       try:
           order = get_order(order_id)
           if not order:
               raise ValueError(f"Order {order_id} not found")
           # Process order...
           return True
       except Exception as e:
           logger.error(f"Error processing order {order_id}: {str(e)}")
           return None  # Different return type for errors
   ```

   #### 7.1.4.3. Study and replicate the codebase's established patterns and conventions
   - **DON'T**: Introduce new coding styles or patterns
   - **DON'T**: Use different error handling approaches than the rest of the codebase
   - **DO**: Study the existing code style before making changes
   - **DO**: Follow established patterns for consistency

### 7.1.5. Fix only the specific reported bug without additional changes
   - Fix only the specific bug reported
   - Avoid the temptation to "improve" working code

   #### 7.1.5.1. Address only the exact bug described without fixing adjacent issues
   ```python
   # Bug report: Function crashes when input is None
   
   # Original function with bug
   def process_data(data):
       """Process the input data."""
       result = data.strip().lower()  # Crashes if data is None
       return result
   
   # Targeted fix
   def process_data(data):
       """Process the input data."""
       if data is None:
           return None
       result = data.strip().lower()
       return result
   ```

   #### 7.1.5.2. Resist adding enhancements or fixing unreported issues when fixing bugs
   ```python
   # Bug report: Function crashes when input is None
   
   # Overengineered fix with unrelated changes
   def process_data(data, normalize=True, validate=True):
       """Process the input data with enhanced features."""
       # Fixed the reported bug
       if data is None:
           return None
           
       # Unrequested validation feature
       if validate and not isinstance(data, str):
           raise TypeError("Input must be a string")
           
       # Unrequested normalization options
       result = data.strip()
       if normalize:
           result = result.lower()
           result = re.sub(r'\s+', ' ', result)
           result = unicodedata.normalize('NFKC', result)
           
       # Added unrequested caching
       cache.set(f"processed:{hash(data)}", result, timeout=3600)
       
       return result
   ```

   #### 7.1.5.3. Verify your fix addresses precisely the reported issue and nothing more
   - **DON'T**: Fix "potential" bugs that haven't been reported
   - **DON'T**: Add enhancements while fixing bugs
   - **DO**: Focus on the specific issue reported
   - **DO**: Verify that the fix addresses the exact problem described

## 7.2. Follow specific guidelines when providing AI-assisted code changes

When working with AI coding assistants, keeping them focused on the exact task is crucial. Follow these guidelines to ensure AI-generated code addresses only the specific problem without adding unrelated changes.

### 7.2.1. Create precise and bounded requests with explicit limitations

#### 7.2.1.1. Define exact boundaries for what should and should not be modified
   
   ##### 7.2.1.1.1. Specify the exact changes needed with clear scope limitations
   ```
   "Add input validation to the create_user function to check that the email 
   parameter is a valid email format. Don't modify any other parameters or 
   the function's return type."
   ```
   
   ##### 7.2.1.1.2. Avoid vague requests that invite scope expansion and overengineering
   ```
   "Improve the create_user function"
   ```

### 7.2.2. Explicitly limit changes to specific files and functions
   - Explicitly limit the AI to the specific file and function
   - State which parts of the codebase should remain untouched
   
   #### 7.2.2.1. Define clear boundaries for which code can be modified
   ```
   "Fix the bug in utils/validation.py in the validate_password function 
   where it's not checking minimum length. Don't modify any other functions
   in the file or change any other validation rules."
   ```
   
   #### 7.2.2.2. Prevent unbounded changes by specifying exact modification targets
   ```
   "Fix the password validation"
   ```

### 7.2.3. Request only one logical change at a time
   - Request one logical change at a time
   - Break complex tasks into sequential, focused requests
   
   #### 7.2.3.1. Focus each request on implementing a single logical concern
   ```
   "First, let's add the User class with basic properties and constructor.
   After that's done, we'll add the authentication methods in a separate step."
   ```
   
   #### 7.2.3.2. Break complex tasks into sequential steps rather than bundling concerns
   ```
   "Create a User class with properties, authentication, database integration,
   and admin panel functionality"
   ```

### 7.2.4. Carefully review all changes before accepting them
   - Review AI-generated changes before applying them
   - Verify that only the requested changes were made
   
   #### 7.2.4.1. Verify changes match exactly what was requested with no extras
   ```
   "Before committing: Check that only the requested validation logic was 
   added and no other function signatures or behaviors were changed"
   ```

### 7.2.5. Validate all changes remain within the original scope
   - The AI should self-check if its proposed changes stay within the requested scope
   - Ensure that each part of the change directly relates to the original request
   - After completing the task, perform an analysis of all changes made
   - Inform the user of any potential out-of-scope modifications for their review
   
   #### 7.2.5.1. Verify and confirm all changes directly relate to the request
   ```
   "Before submitting this code change, I've verified that:
   1. Only the requested feature (email validation) was implemented
   2. No existing functionality was modified beyond the scope
   3. No additional enhancements were added that weren't requested
   4. Only the specified function was modified
   
   After analyzing my changes, I notice I've also modified the error handling format in the function. 
   This wasn't explicitly requested - please confirm if this additional change is acceptable."
   ```
   
   #### 7.2.5.2. Always self-check that changes remain strictly within requested scope
   ```
   # Not mentioning any scope verification before submitting changes
   # or submitting changes without checking if they're limited to what was requested
   ```
   
   #### 7.2.5.3. Disclose any potentially out-of-scope changes for explicit approval
   - **DON'T**: Assume that proposed changes automatically stay within scope
   - **DON'T**: Let implementation details drive feature expansion
   - **DON'T**: Hide potential out-of-scope changes from the user
   - **DO**: Explicitly verify each change against the original request
   - **DO**: Question any addition that wasn't specifically requested
   - **DO**: Proactively identify and disclose potential scope issues after task completion

### 7.2.6. Provide specific feedback when changes exceed scope
   - If the AI makes out-of-scope changes, provide specific correction
   - Explain exactly what was out of scope and why
   
   #### 7.2.6.1. Identify specific out-of-scope changes and request precise corrections
   ```
   "The changes you made to the error handling in process_payment() were 
   not part of the request. Please revert those changes and only modify 
   the validation logic as originally requested."
   ```
   
   #### 7.2.6.2. Avoid vague feedback that doesn't clearly identify scope violations
   ```
   "That's not right, try again"
   ```

## 7.3. Prevent common focus problems with explicit constraints

### 7.3.1. Explicitly forbid adding unrequested "nice-to-have" features
   - Explicitly instruct the AI not to add "nice-to-have" features
   - State that any extra functionality requires explicit approval
   
   #### 7.3.1.1. Set clear boundaries about which features should be implemented
   ```
   "Add only the login functionality. Do not add registration, password 
   reset, or any other authentication features unless specifically requested."
   ```

### 7.3.2. Maintain existing architecture without introducing new patterns
   - Instruct the AI to maintain the existing architecture
   - Require approval for architectural changes
   
   #### 7.3.2.1. Implement changes within the constraints of the existing architecture
   ```
   "Implement this feature following the existing repository pattern. 
   Do not introduce new architectural patterns or layers."
   ```

### 7.3.3. Ensure all public interfaces remain stable and compatible
   - Explicitly forbid changing function signatures
   - Require backward compatibility for public APIs
   
   #### 7.3.3.1. Preserve existing function signatures and ensure backward compatibility
   ```
   "Fix the bug in the calculate_total function without changing its 
   signature or return type. All existing code calling this function 
   must continue to work without modification."
   ```

### 7.3.4. Match existing code style without reformatting unrelated code
   - Instruct the AI to match the existing code style
   - Forbid style changes to unrelated code
   
   #### 7.3.4.1. Follow the established style patterns without reformatting existing code
   ```
   "When adding this function, match the existing code style in the file.
   Do not reformat or restructure any existing code."
   ```
