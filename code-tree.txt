quickscale
├── dist
│   ├── quickscale-0.11.0-py3-none-any.whl
│   └── quickscale-0.11.0.tar.gz
├── docs
│   ├── contrib
│   │   ├── 01_ai_programming_assistant.md
│   │   ├── 02_documentation_guidelines.md
│   │   ├── 03_clean_code_principles.md
│   │   ├── 04_testing_guidelines.md
│   │   ├── 05_stack_and_architecture.md
│   │   ├── 06_development_workflow.md
│   │   └── 07_task_focus_and_ai_workflow.md
│   ├── DATABASE_VARIABLES.md
│   └── MESSAGE_MANAGER.md
├── htmlcov
│   ├── class_index.html
│   ├── coverage_html_cb_6fb7b396.js
│   │   ├── debounce(callback, wait)
│   │   ├── function(...args)
│   │   ├── setTimeout(()
│   │   ├── checkVisible(element)
│   │   ├── on_click(sel, fn)
│   │   ├── getCellValue(row, column = 0)
│   │   ├── rowComparator(rowA, rowB, column = 0)
│   │   ├── sortColumn(th)
│   │   ├── function()
│   │   ├── function()
│   │   ├── forEach(row => {
            var show = false;
            // Check the text filter.
            for (let column = 0; column < totals.length; column++)
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── function(event)
│   │   ├── function(category, should_show)
│   │   ├── function(n)
│   │   ├── function(b, e)
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── function(line_elt)
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── function(lineno)
│   │   ├── function()
│   │   ├── function()
│   │   ├── function(to_pos)
│   │   ├── function()
│   │   ├── function()
│   │   ├── function()
│   │   ├── updateHeader()
│   │   ├── function(e)
│   │   └── addEventListener("DOMContentLoaded", ()
│   ├── favicon_32_cb_58284776.png
│   ├── function_index.html
│   ├── index.html
│   ├── keybd_closed_cb_ce680311.png
│   ├── status.json
│   ├── style_cb_8e611ae1.css
│   ├── z_11f02c609ea281ee___init___py.html
│   ├── z_11f02c609ea281ee_config_manager_py.html
│   ├── z_11f02c609ea281ee_settings_py.html
│   ├── z_4cb1056076d3a9a4___init___py.html
│   ├── z_4cb1056076d3a9a4_command_base_py.html
│   ├── z_4cb1056076d3a9a4_command_manager_py.html
│   ├── z_4cb1056076d3a9a4_command_utils_py.html
│   ├── z_4cb1056076d3a9a4_development_commands_py.html
│   ├── z_4cb1056076d3a9a4_init_command_py.html
│   ├── z_4cb1056076d3a9a4_project_commands_py.html
│   ├── z_4cb1056076d3a9a4_project_manager_py.html
│   ├── z_4cb1056076d3a9a4_service_commands_py.html
│   ├── z_4cb1056076d3a9a4_system_commands_py.html
│   ├── z_59e4a61286fe81fc___init___py.html
│   ├── z_59e4a61286fe81fc_service_verification_py.html
│   ├── z_633af74e7ed69f17___init___py.html
│   ├── z_633af74e7ed69f17_cli_py.html
│   ├── z_9fc255f6f77b11a4___init___py.html
│   ├── z_9fc255f6f77b11a4_env_utils_py.html
│   ├── z_9fc255f6f77b11a4_error_manager_py.html
│   ├── z_9fc255f6f77b11a4_help_manager_py.html
│   ├── z_9fc255f6f77b11a4_log_scanner_py.html
│   ├── z_9fc255f6f77b11a4_logging_manager_py.html
│   └── z_9fc255f6f77b11a4_template_generator_py.html
├── quickscale
│   ├── commands
│   │   ├── verification
│   │   │   ├── __init__.py
│   │   │   └── service_verification.py
│   │   │       ├── _verify_container_status(self)
│   │   │       ├── _verify_database_connectivity(project_name, self)
│   │   │       └── _verify_web_service(self)
│   │   ├── __init__.py
│   │   ├── command_base.py
│   │   │   └── Command {}
│   │   │       ├── __init__(self)
│   │   │       ├── execute(self)
│   │   │       ├── _exit_with_error(self, message)
│   │   │       ├── handle_error(self, error, context, recovery, exit_on_error)
│   │   │       └── safe_execute(self)
│   │   ├── command_manager.py
│   │   │   └── CommandManager {}
│   │   │       ├── __init__(self)
│   │   │       ├── execute_command(self, command_name)
│   │   │       ├── init_project(self, project_name)
│   │   │       ├── destroy_project(self)
│   │   │       ├── start_services(self)
│   │   │       ├── stop_services(self)
│   │   │       ├── view_logs(self, service, follow, since, lines, timestamps)
│   │   │       ├── check_services_status(self)
│   │   │       ├── open_shell(self, django_shell, command)
│   │   │       ├── run_manage_command(self, args)
│   │   │       ├── check_requirements(self, print_info)
│   │   │       ├── get_available_commands(self)
│   │   │       ├── _handle_service_commands(self, command_name, args)
│   │   │       ├── _handle_project_commands(self, command_name, args)
│   │   │       ├── _handle_shell_commands(self, command_name, args)
│   │   │       ├── _display_help(self, topic)
│   │   │       ├── _handle_info_commands(self, command_name, args)
│   │   │       └── handle_command(self, command_name, args)
│   │   ├── command_utils.py
│   │   │   ├── get_current_uid_gid()
│   │   │   ├── generate_secret_key(length)
│   │   │   ├── is_binary_file(file_path)
│   │   │   ├── copy_with_vars(src_file, dest_file, logger)
│   │   │   ├── _copy_binary_file(src_file, dest_file, logger)
│   │   │   ├── _copy_text_file(src_file, dest_file, logger)
│   │   │   ├── copy_files_recursive(src_dir, dest_dir, logger)
│   │   │   ├── wait_for_postgres(pg_user, logger, max_attempts, delay)
│   │   │   ├── fix_permissions(directory, uid, gid, logger, pg_user)
│   │   │   ├── find_available_port(start_port, max_attempts)
│   │   │   ├── _check_port_availability(port, timeout)
│   │   │   ├── _find_available_port_in_range(start, end, timeout)
│   │   │   ├── _find_port_in_sequential_range(start_port, count, available_ports, attempts_limit, logger)
│   │   │   ├── _find_port_in_common_ranges(count, available_ports, attempts_limit, current_attempts, logger)
│   │   │   ├── _find_port_in_random_ranges(count, available_ports, attempts_limit, current_attempts, logger)
│   │   │   ├── _add_random_high_ports(count, available_ports, logger)
│   │   │   └── find_available_ports(count, start_port, max_attempts)
│   │   ├── development_commands.py
│   │   │   ├── ShellCommand {}
│   │   │   │   └── execute(self, django_shell, command)
│   │   │   └── ManageCommand {}
│   │   │       └── execute(self, args)
│   │   ├── init_command.py
│   │   │   └── InitCommand {}
│   │   │       ├── validate_project_name(self, project_name)
│   │   │       ├── _generate_secret_key(self, length)
│   │   │       ├── _get_template_variables(self, project_name)
│   │   │       ├── _sync_template_modules(self, project_dir, project_name)
│   │   │       └── execute(self, project_name)
│   │   ├── project_commands.py
│   │   │   └── DestroyProjectCommand {}
│   │   │       ├── __init__(self)
│   │   │       ├── _confirm_destruction(self, project_name)
│   │   │       └── execute(self)
│   │   ├── project_manager.py
│   │   │   └── ProjectManager {}
│   │   │       ├── get_project_root()
│   │   │       ├── check_project_exists(print_message)
│   │   │       ├── get_project_state()
│   │   │       ├── check_test_directory()
│   │   │       ├── check_running_containers()
│   │   │       ├── stop_containers(project_name)
│   │   │       ├── read_tracking_file(file_path)
│   │   │       ├── write_tracking_file(file_path, data)
│   │   │       ├── get_tracking_param(file_path, param_name)
│   │   │       └── get_project_name(file_path)
│   │   ├── service_commands.py
│   │   │   ├── handle_service_error(e, action)
│   │   │   ├── ServiceUpCommand {}
│   │   │   │   ├── __init__(self)
│   │   │   │   ├── _find_available_ports(self, start_offset)
│   │   │   │   ├── _extract_port_values(self, env_content)
│   │   │   │   ├── _check_and_update_pg_port(self, pg_port)
│   │   │   │   ├── _check_and_update_web_port(self, web_port)
│   │   │   │   ├── _update_env_content(self, env_content, updated_ports)
│   │   │   │   ├── _update_env_file_ports(self, env)
│   │   │   │   ├── _is_port_in_use(self, port)
│   │   │   │   ├── _is_feature_enabled(self, env_value)
│   │   │   │   ├── _update_docker_compose_ports(self, updated_ports)
│   │   │   │   ├── _check_port_availability(self, env)
│   │   │   │   ├── _prepare_environment_and_ports(self, no_cache)
│   │   │   │   ├── _find_ports_for_retry(self, retry_count, max_retries, no_cache)
│   │   │   │   ├── _start_docker_services(self, env, no_cache)
│   │   │   │   ├── _handle_docker_process_error(self, e, env)
│   │   │   │   ├── _get_docker_compose_logs(self, env)
│   │   │   │   ├── _check_if_services_running_despite_error(self, e, env)
│   │   │   │   ├── _verify_services_running(self, env)
│   │   │   │   ├── _start_stopped_containers(self)
│   │   │   │   ├── _start_container(self, container_name, status)
│   │   │   │   ├── _print_service_info(self, updated_ports)
│   │   │   │   ├── _handle_retry_attempt(self, retry_count, max_retries, env, updated_ports, no_cache)
│   │   │   │   ├── _start_services_with_retry(self, max_retries, no_cache)
│   │   │   │   └── execute(self, no_cache)
│   │   │   ├── ServiceDownCommand {}
│   │   │   │   ├── __init__(self)
│   │   │   │   └── execute(self)
│   │   │   ├── ServiceLogsCommand {}
│   │   │   │   ├── __init__(self)
│   │   │   │   └── execute(self, service, follow, since, lines, timestamps)
│   │   │   └── ServiceStatusCommand {}
│   │   │       ├── __init__(self)
│   │   │       └── execute(self)
│   │   └── system_commands.py
│   │       └── CheckCommand {}
│   │           ├── _check_docker_compose(self, print_info)
│   │           ├── _check_tool(self, tool, print_info)
│   │           ├── _check_docker_daemon(self, print_info)
│   │           └── execute(self, print_info)
│   ├── config
│   │   ├── __init__.py
│   │   ├── config_manager.py
│   │   │   ├── load_config(config_path)
│   │   │   ├── save_config(config_data, output_path)
│   │   │   ├── validate_config(config_data)
│   │   │   └── find_default_config()
│   │   └── settings.py
│   │       └── validate_production_settings()
│   ├── templates
│   │   ├── common
│   │   │   ├── migrations
│   │   │   │   ├── 0001_initial.py
│   │   │   │   │   └── Migration {}
│   │   │   │   └── __init__.py
│   │   │   ├── templates
│   │   │   ├── apps.py
│   │   │   │   └── CommonConfig {}
│   │   │   ├── urls.py
│   │   │   └── views.py
│   │   ├── core
│   │   │   ├── migrations
│   │   │   │   ├── 0001_update_site_domain.py
│   │   │   │   │   ├── update_site_forward(apps, schema_editor)
│   │   │   │   │   ├── update_site_backward(apps, schema_editor)
│   │   │   │   │   ├── create_site_permissions(apps, schema_editor)
│   │   │   │   │   └── Migration {}
│   │   │   │   └── __init__.py
│   │   │   ├── asgi.py
│   │   │   ├── context_processors.py
│   │   │   │   ├── project_settings(request)
│   │   │   │   └── settings_context(request)
│   │   │   ├── email_settings.py
│   │   │   ├── security_settings.py
│   │   │   ├── settings.py
│   │   │   ├── test_runner.py
│   │   │   │   ├── QuickScaleTestLoader {}
│   │   │   │   │   └── discover(self, start_dir, pattern, top_level_dir)
│   │   │   │   └── QuickScaleTestRunner {}
│   │   │   │       ├── __init__(self)
│   │   │   │       └── build_suite(self, test_labels)
│   │   │   ├── test_settings.py
│   │   │   ├── urls.py
│   │   │   │   ├── health_check(request)
│   │   │   │   └── admin_test(request)
│   │   │   └── wsgi.py
│   │   ├── dashboard
│   │   │   ├── migrations
│   │   │   │   ├── 0001_initial.py
│   │   │   │   │   └── Migration {}
│   │   │   │   └── __init__.py
│   │   │   ├── templates
│   │   │   ├── templatetags
│   │   │   │   └── __init__.py
│   │   │   ├── tests
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_product_admin.py
│   │   │   │   │   ├── ProductAdminTestCase {}
│   │   │   │   │   │   ├── setUpClass(cls)
│   │   │   │   │   │   ├── tearDownClass(cls)
│   │   │   │   │   │   ├── test_product_admin_page_requires_staff(self, mock_getenv)
│   │   │   │   │   │   ├── test_product_admin_displays_products(self, mock_list_products, mock_getenv)
│   │   │   │   │   │   ├── test_product_admin_refresh_functionality(self, mock_sync, mock_getenv)
│   │   │   │   │   │   ├── test_product_admin_refresh_requires_post(self, mock_getenv)
│   │   │   │   │   │   ├── test_product_admin_displays_products_from_db(self, mock_getenv)
│   │   │   │   │   │   ├── test_product_admin_refresh_saves_to_db(self, mock_sync, mock_getenv)
│   │   │   │   │   │   ├── test_product_detail_view(self, mock_get_prices, mock_retrieve_product, mock_getenv)
│   │   │   │   │   │   ├── test_update_product_order_view(self, mock_getenv)
│   │   │   │   │   │   ├── test_update_product_order_invalid_method(self, mock_getenv)
│   │   │   │   │   │   ├── test_update_product_order_invalid_id(self, mock_getenv)
│   │   │   │   │   │   └── test_update_product_order_invalid_display_order(self, mock_getenv)
│   │   │   │   │   ├── TestProductAdminTemplateRendering {}
│   │   │   │   │   │   ├── setUp(self)
│   │   │   │   │   │   ├── tearDown(self)
│   │   │   │   │   │   ├── test_product_admin_stripe_disabled(self, mock_get_env, mock_is_enabled)
│   │   │   │   │   │   └── test_product_admin_view_stripe_disabled(self, mock_view)
│   │   │   │   │   └── TestProductAdminLoadingStripeTagsConditionally {}
│   │   │   │   │       └── test_template_handles_conditional_loading(self)
│   │   │   │   └── test_views_no_stripe.py
│   │   │   │       └── DashboardWithoutStripeTestCase {}
│   │   │   │           ├── setUpClass(cls)
│   │   │   │           ├── tearDownClass(cls)
│   │   │   │           ├── test_dashboard_index_loads_without_stripe(self, mock_is_feature_enabled)
│   │   │   │           ├── test_product_admin_loads_without_stripe(self, mock_is_feature_enabled)
│   │   │   │           ├── test_product_admin_refresh_error_without_stripe(self, mock_is_feature_enabled)
│   │   │   │           ├── test_product_sync_error_without_stripe(self, mock_is_feature_enabled)
│   │   │   │           ├── test_product_admin_shows_missing_api_keys(self, mock_get_stripe_manager, mock_is_feature_enabled)
│   │   │   │           └── test_product_admin_handles_missing_stripe_package(self, mock_get_stripe_manager, mock_is_feature_enabled)
│   │   │   ├── apps.py
│   │   │   │   └── DashboardConfig {}
│   │   │   ├── tests_product_admin.py
│   │   │   ├── tests_views_no_stripe.py
│   │   │   │   └── DashboardWithoutStripeTestCase {}
│   │   │   │       ├── setUpTestData(cls)
│   │   │   │       ├── setUp(self)
│   │   │   │       ├── test_dashboard_loads_without_stripe(self)
│   │   │   │       └── test_subscription_page_without_stripe(self)
│   │   │   ├── urls.py
│   │   │   └── views.py
│   │   │       ├── index(request)
│   │   │       ├── product_admin(request)
│   │   │       ├── product_detail(request, product_id)
│   │   │       ├── update_product_order(request, product_id)
│   │   │       ├── product_sync(request, product_id)
│   │   │       └── sync_products(request)
│   │   ├── docs
│   │   │   ├── auth_templates.md
│   │   │   ├── styling_guidelines.md
│   │   │   └── template_customization_examples.md
│   │   ├── js
│   │   │   ├── password_validation.js
│   │   │   │   ├── addEventListener('DOMContentLoaded', function()
│   │   │   │   ├── checkPasswordStrength(password)
│   │   │   │   ├── updateUI()
│   │   │   │   ├── validatePassword(password)
│   │   │   │   └── score(()
│   │   │   └── plan_selection.js
│   │   │       ├── addEventListener('DOMContentLoaded', ()
│   │   │       └── forEach(button => {
        button.addEventListener('click', function()
│   │   ├── logs
│   │   ├── public
│   │   │   ├── migrations
│   │   │   │   ├── 0001_initial.py
│   │   │   │   │   └── Migration {}
│   │   │   │   └── __init__.py
│   │   │   ├── templates
│   │   │   ├── apps.py
│   │   │   │   └── PublicConfig {}
│   │   │   ├── urls.py
│   │   │   └── views.py
│   │   │       ├── index(request)
│   │   │       ├── about(request)
│   │   │       └── contact(request)
│   │   ├── static
│   │   │   ├── css
│   │   │   │   └── styles.css
│   │   │   ├── js
│   │   │   │   ├── main.js
│   │   │   │   │   ├── addEventListener('DOMContentLoaded', function()
│   │   │   │   │   ├── setupMobileMenu()
│   │   │   │   │   ├── forEach(el => {
            el.addEventListener('click', ()
│   │   │   │   │   ├── setupFlashMessages()
│   │   │   │   │   ├── forEach(($delete)
│   │   │   │   │   ├── addEventListener('click', ()
│   │   │   │   │   ├── setCookie(name, value, days)
│   │   │   │   │   └── getCookie(name)
│   │   │   │   └── password_validation.js
│   │   │   │       ├── addEventListener('alpine:init', ()
│   │   │   │       ├── progressValue()
│   │   │   │       ├── color()
│   │   │   │       ├── feedback()
│   │   │   │       ├── matchMessage()
│   │   │   │       ├── matchMessageClass()
│   │   │   │       └── isSubmitDisabled()
│   │   │   ├── favicon.ico
│   │   │   ├── favicon.svg
│   │   │   └── generate_favicon.sh
│   │   ├── stripe_manager
│   │   │   ├── apps
│   │   │   ├── migrations
│   │   │   │   ├── 0001_initial.py
│   │   │   │   │   └── Migration {}
│   │   │   │   ├── README.md
│   │   │   │   └── __init__.py
│   │   │   ├── templates
│   │   │   │   └── stripe_manager
│   │   │   │       ├── checkout_error.html
│   │   │   │       ├── checkout_success.html
│   │   │   │       └── plan_comparison.html
│   │   │   ├── templatetags
│   │   │   │   ├── __init__.py
│   │   │   │   └── stripe_tags.py
│   │   │   │       ├── format_stripe_price(price)
│   │   │   │       ├── get_stripe_product_name(product)
│   │   │   │       ├── get_stripe_product_status(product)
│   │   │   │       └── get_stripe_price(product, currency)
│   │   │   ├── tests
│   │   │   │   ├── __init__.py
│   │   │   │   ├── mock_env_utils.py
│   │   │   │   │   ├── get_env(key, default)
│   │   │   │   │   └── is_feature_enabled(value)
│   │   │   │   ├── test_app_registration.py
│   │   │   │   │   ├── TestStripeAppRegistration {}
│   │   │   │   │   │   ├── test_app_in_installed_apps(self)
│   │   │   │   │   │   └── test_app_config_loads_correctly(self)
│   │   │   │   │   └── TestStripeTemplateTagsRegistration {}
│   │   │   │   │       ├── test_template_tags_load_when_stripe_enabled(self, mock_is_enabled)
│   │   │   │   │       ├── test_template_tags_not_needed_when_stripe_disabled(self, mock_is_enabled)
│   │   │   │   │       ├── test_format_stripe_price_filter_registered(self)
│   │   │   │   │       └── test_conditional_loading_in_template(self)
│   │   │   │   ├── test_stripe_manager.py
│   │   │   │   │   └── StripeManagerTest {}
│   │   │   │   │       ├── setUp(self)
│   │   │   │   │       ├── tearDown(self)
│   │   │   │   │       ├── test_get_instance_singleton(self)
│   │   │   │   │       ├── test_stripe_disabled_raises_error(self)
│   │   │   │   │       ├── test_api_key_missing_raises_error(self)
│   │   │   │   │       ├── test_stripe_package_not_available_raises_error(self)
│   │   │   │   │       ├── test_stripe_property(self)
│   │   │   │   │       ├── test_create_customer(self)
│   │   │   │   │       ├── test_retrieve_customer(self)
│   │   │   │   │       ├── test_create_product(self)
│   │   │   │   │       ├── test_retrieve_product(self)
│   │   │   │   │       ├── test_list_products(self)
│   │   │   │   │       ├── test_update_product(self)
│   │   │   │   │       ├── test_get_product_prices(self)
│   │   │   │   │       ├── test_create_price(self)
│   │   │   │   │       ├── test_error_handling(self)
│   │   │   │   │       ├── test_initialization_exceptions(self)
│   │   │   │   │       └── test_double_initialization(self)
│   │   │   │   ├── test_template_tags.py
│   │   │   │   │   ├── MockPrice {}
│   │   │   │   │   │   └── __init__(self, unit_amount, currency, recurring)
│   │   │   │   │   ├── MockRecurring {}
│   │   │   │   │   │   └── __init__(self, interval, interval_count)
│   │   │   │   │   ├── MockProduct {}
│   │   │   │   │   │   └── __init__(self, name, active, prices)
│   │   │   │   │   ├── MockPrices {}
│   │   │   │   │   │   └── __init__(self, data)
│   │   │   │   │   ├── TestStripeTagsNonFormatting {}
│   │   │   │   │   │   ├── setUp(self)
│   │   │   │   │   │   ├── test_get_stripe_product_name_attribute_access(self)
│   │   │   │   │   │   ├── test_get_stripe_product_name_dictionary_access(self)
│   │   │   │   │   │   ├── test_get_stripe_product_status_attribute_access(self)
│   │   │   │   │   │   ├── test_get_stripe_product_status_dictionary_access(self)
│   │   │   │   │   │   ├── test_get_stripe_price_attribute_access(self)
│   │   │   │   │   │   └── test_get_stripe_price_dictionary_access(self)
│   │   │   │   │   ├── test_format_stripe_price()
│   │   │   │   │   └── test_template_tag_conditional_loading()
│   │   │   │   ├── test_webhooks.py
│   │   │   │   │   ├── MockStripeManagerModule {}
│   │   │   │   │   ├── StripeWebhookTest {}
│   │   │   │   │   │   ├── setUp(self)
│   │   │   │   │   │   ├── tearDown(self)
│   │   │   │   │   │   ├── test_webhook_processing(self)
│   │   │   │   │   │   ├── test_webhook_method_not_allowed(self)
│   │   │   │   │   │   ├── test_webhook_missing_signature(self)
│   │   │   │   │   │   ├── test_webhook_invalid_signature(self)
│   │   │   │   │   │   └── test_webhook_products_processing(self)
│   │   │   │   │   └── MockStripeCustomerTest {}
│   │   │   │   │       ├── test_create_with_defaults(self)
│   │   │   │   │       └── test_create_with_custom_values(self)
│   │   │   │   └── utils.py
│   │   │   │       ├── create_mock_webhook_event(event_type, object_data)
│   │   │   │       ├── create_mock_product(id, name, description, active, metadata)
│   │   │   │       ├── create_mock_price(id, product_id, unit_amount, currency, active, metadata)
│   │   │   │       └── create_mock_products_with_prices(count)
│   │   │   ├── __init__.py
│   │   │   ├── admin.py
│   │   │   │   └── StripeProductAdmin {}
│   │   │   │       ├── get_urls(self)
│   │   │   │       ├── sync_product(self, request, object_id)
│   │   │   │       ├── get_actions(self, request)
│   │   │   │       ├── sync_selected(self, request, queryset)
│   │   │   │       ├── sync_all_products_view(self, request)
│   │   │   │       └── changelist_view(self, request, extra_context)
│   │   │   ├── apps.py
│   │   │   │   └── StripeConfig {}
│   │   │   │       └── ready(self)
│   │   │   ├── models.py
│   │   │   │   └── StripeProduct {}
│   │   │   │       ├── Meta {}
│   │   │   │       ├── __str__(self)
│   │   │   │       ├── sync_with_stripe(self)
│   │   │   │       └── clean(self)
│   │   │   ├── stripe_manager.py
│   │   │   │   ├── StripeConfigurationError {}
│   │   │   │   └── StripeManager {}
│   │   │   │       ├── get_instance(cls)
│   │   │   │       ├── _initialize(self)
│   │   │   │       ├── client(self)
│   │   │   │       ├── create_customer(self, email, name, metadata)
│   │   │   │       ├── retrieve_customer(self, customer_id)
│   │   │   │       ├── get_customer_by_user(self, user)
│   │   │   │       ├── create_product(self, name, description, metadata)
│   │   │   │       ├── create_product_with_price(self, name, price_amount, currency, description, metadata)
│   │   │   │       ├── retrieve_product(self, product_id)
│   │   │   │       ├── list_products(self, active)
│   │   │   │       ├── create_price(self, product_id, unit_amount, currency, recurring_interval, metadata)
│   │   │   │       ├── get_product_prices(self, product_id, active)
│   │   │   │       ├── create_subscription(self, customer_id, price_id, quantity, metadata)
│   │   │   │       ├── retrieve_subscription(self, subscription_id)
│   │   │   │       ├── update_subscription(self, subscription_id, items, proration_behavior, metadata)
│   │   │   │       ├── cancel_subscription(self, subscription_id)
│   │   │   │       ├── list_subscriptions(self, customer_id, price_id, status, limit)
│   │   │   │       ├── create_invoice(self, customer_id, days_until_due, metadata)
│   │   │   │       ├── retrieve_invoice(self, invoice_id)
│   │   │   │       ├── finalize_invoice(self, invoice_id)
│   │   │   │       ├── create_invoice_item(self, customer_id, price_id, invoice_id, quantity, metadata)
│   │   │   │       ├── create_payment_intent(self, amount, currency, customer_id, metadata)
│   │   │   │       ├── retrieve_payment_intent(self, payment_intent_id)
│   │   │   │       ├── confirm_payment_intent(self, payment_intent_id, payment_method)
│   │   │   │       ├── cancel_payment_intent(self, payment_intent_id)
│   │   │   │       ├── list_payment_intents(self, customer_id, limit)
│   │   │   │       ├── create_checkout_session(self, price_id, quantity, success_url, cancel_url, customer_email, metadata)
│   │   │   │       ├── create_refund(self, payment_intent_id, amount, reason, metadata)
│   │   │   │       ├── sync_product_to_stripe(self, product_obj)
│   │   │   │       ├── sync_product_from_stripe(self, stripe_product_id, product_model)
│   │   │   │       └── sync_products_from_stripe(self, product_model)
│   │   │   ├── urls.py
│   │   │   ├── utils.py
│   │   │   │   └── MockStripeCustomer {}
│   │   │   │       └── create(cls, id, email, name, metadata)
│   │   │   └── views.py
│   │   │       ├── status(request)
│   │   │       ├── product_list(request)
│   │   │       ├── product_detail(request, product_id)
│   │   │       ├── webhook(request)
│   │   │       ├── PublicPlanListView {}
│   │   │       │   ├── get_queryset(self)
│   │   │       │   └── get_context_data(self)
│   │   │       ├── CheckoutView {}
│   │   │       │   └── post(self, request)
│   │   │       ├── checkout_success_view(request)
│   │   │       └── checkout_cancel_view(request)
│   │   ├── templates
│   │   │   ├── account
│   │   │   │   ├── email
│   │   │   │   │   ├── account_already_exists_message.txt
│   │   │   │   │   ├── account_already_exists_subject.txt
│   │   │   │   │   ├── base_message.txt
│   │   │   │   │   ├── base_notification.txt
│   │   │   │   │   ├── base_signup.txt
│   │   │   │   │   ├── email_confirmation_message.txt
│   │   │   │   │   ├── email_confirmation_signup_message.txt
│   │   │   │   │   ├── email_confirmation_signup_subject.txt
│   │   │   │   │   ├── email_confirmation_subject.txt
│   │   │   │   │   ├── password_reset_key_message.txt
│   │   │   │   │   ├── password_reset_key_subject.txt
│   │   │   │   │   ├── unknown_account_message.txt
│   │   │   │   │   └── unknown_account_subject.txt
│   │   │   │   ├── base.html
│   │   │   │   ├── email.html
│   │   │   │   ├── email_confirm.html
│   │   │   │   ├── login.html
│   │   │   │   ├── logout.html
│   │   │   │   ├── password_change.html
│   │   │   │   ├── password_reset.html
│   │   │   │   ├── password_reset_done.html
│   │   │   │   ├── password_reset_from_key.html
│   │   │   │   ├── password_reset_from_key_done.html
│   │   │   │   ├── signup.html
│   │   │   │   ├── verification_sent.html
│   │   │   │   └── verified_email_required.html
│   │   │   ├── admin
│   │   │   │   └── stripe_manager
│   │   │   │       └── stripeproduct
│   │   │   │           └── change_list.html
│   │   │   ├── base
│   │   │   │   └── base.html
│   │   │   ├── components
│   │   │   │   ├── footer.html
│   │   │   │   ├── messages.html
│   │   │   │   └── navbar.html
│   │   │   ├── dashboard
│   │   │   │   ├── index.html
│   │   │   │   ├── product_admin.html
│   │   │   │   └── product_detail.html
│   │   │   ├── public
│   │   │   │   ├── about.html
│   │   │   │   ├── contact.html
│   │   │   │   ├── home.html
│   │   │   │   └── index.html
│   │   │   ├── stripe
│   │   │   │   ├── error.html
│   │   │   │   ├── product_detail.html
│   │   │   │   ├── product_list.html
│   │   │   │   └── status.html
│   │   │   ├── users
│   │   │   │   ├── login.html
│   │   │   │   ├── login_form.html
│   │   │   │   ├── profile.html
│   │   │   │   ├── profile_form.html
│   │   │   │   ├── signup.html
│   │   │   │   └── signup_form.html
│   │   │   ├── admin_test.html
│   │   │   └── base.html
│   │   ├── tests
│   │   │   ├── stripe_manager
│   │   │   │   ├── test_admin.py
│   │   │   │   │   └── StripeProductAdminTest {}
│   │   │   │   │       ├── setUp(self)
│   │   │   │   │       ├── test_list_display(self)
│   │   │   │   │       ├── test_search(self)
│   │   │   │   │       ├── test_filter(self)
│   │   │   │   │       ├── test_edit_form(self)
│   │   │   │   │       ├── test_fieldset_organization(self)
│   │   │   │   │       ├── test_sync_action(self)
│   │   │   │   │       └── test_bulk_sync_action(self)
│   │   │   │   ├── test_models.py
│   │   │   │   │   └── StripeProductModelTest {}
│   │   │   │   │       ├── setUp(self)
│   │   │   │   │       ├── test_create_product(self)
│   │   │   │   │       ├── test_product_ordering(self)
│   │   │   │   │       ├── test_negative_price_validation(self)
│   │   │   │   │       ├── test_invalid_currency(self)
│   │   │   │   │       ├── test_invalid_interval(self)
│   │   │   │   │       ├── test_duplicate_stripe_id(self)
│   │   │   │   │       └── test_str_representation(self)
│   │   │   │   ├── test_plan_views.py
│   │   │   │   │   └── PlanViewsTest {}
│   │   │   │   │       ├── setUpTestData(cls)
│   │   │   │   │       ├── test_plan_comparison_view_displays_active_plans(self)
│   │   │   │   │       └── test_plan_comparison_view_when_stripe_disabled(self)
│   │   │   │   └── test_user_flows.py
│   │   │   │       └── UserFlowsTest {}
│   │   │   │           ├── setUpTestData(cls)
│   │   │   │           ├── test_authenticated_user_can_view_plans(self)
│   │   │   │           └── test_unauthenticated_user_can_view_plans(self)
│   │   │   ├── __init__.py
│   │   │   └── test_sample.py
│   │   │       └── SampleTestCase {}
│   │   │           └── test_sample(self)
│   │   ├── users
│   │   │   ├── management
│   │   │   │   ├── commands
│   │   │   │   │   ├── __init__.py
│   │   │   │   │   └── create_default_users.py
│   │   │   │   │       └── Command {}
│   │   │   │   │           ├── add_arguments(self, parser)
│   │   │   │   │           └── handle(self)
│   │   │   │   └── __init__.py
│   │   │   ├── migrations
│   │   │   │   ├── 0001_initial.py
│   │   │   │   │   └── Migration {}
│   │   │   │   ├── 0002_extend_user_profile.py
│   │   │   │   │   └── Migration {}
│   │   │   │   ├── 0003_alter_customuser_options.py
│   │   │   │   │   └── Migration {}
│   │   │   │   ├── 0004_stripecustomer.py
│   │   │   │   │   └── Migration {}
│   │   │   │   └── __init__.py
│   │   │   ├── tests
│   │   │   │   ├── __init__.py
│   │   │   │   └── test_create_default_users.py
│   │   │   │       └── CreateDefaultUsersTest {}
│   │   │   │           ├── test_command_creates_users(self)
│   │   │   │           ├── test_command_skips_existing_users(self)
│   │   │   │           └── test_command_force_recreates_users(self)
│   │   │   ├── adapters.py
│   │   │   │   ├── AccountAdapter {}
│   │   │   │   │   ├── is_open_for_signup(self, request)
│   │   │   │   │   ├── get_email_confirmation_url(self, request, emailconfirmation)
│   │   │   │   │   ├── get_login_redirect_url(self, request)
│   │   │   │   │   ├── send_mail(self, template_prefix, email, context)
│   │   │   │   │   └── populate_username(self, request, user)
│   │   │   │   └── SocialAccountAdapter {}
│   │   │   │       ├── is_open_for_signup(self, request, sociallogin)
│   │   │   │       ├── pre_social_login(self, request, sociallogin)
│   │   │   │       └── populate_user(self, request, sociallogin, data)
│   │   │   ├── admin.py
│   │   │   │   └── CustomUserAdmin {}
│   │   │   ├── apps.py
│   │   │   │   └── UsersConfig {}
│   │   │   ├── forms.py
│   │   │   │   ├── CustomLoginForm {}
│   │   │   │   │   └── __init__(self)
│   │   │   │   ├── CustomSignupForm {}
│   │   │   │   │   ├── __init__(self)
│   │   │   │   │   └── save(self, request)
│   │   │   │   ├── CustomResetPasswordForm {}
│   │   │   │   │   └── __init__(self)
│   │   │   │   ├── CustomResetPasswordKeyForm {}
│   │   │   │   │   └── __init__(self)
│   │   │   │   ├── CustomChangePasswordForm {}
│   │   │   │   │   └── __init__(self)
│   │   │   │   └── ProfileForm {}
│   │   │   │       ├── Meta {}
│   │   │   │       └── __init__(self)
│   │   │   ├── models.py
│   │   │   │   ├── CustomUserManager {}
│   │   │   │   │   ├── create_user(self, email, password)
│   │   │   │   │   └── create_superuser(self, email, password)
│   │   │   │   ├── CustomUser {}
│   │   │   │   │   ├── Meta {}
│   │   │   │   │   ├── __str__(self)
│   │   │   │   │   └── get_full_name(self)
│   │   │   │   └── StripeCustomer {}
│   │   │   │       ├── Meta {}
│   │   │   │       └── __str__(self)
│   │   │   ├── signup.html
│   │   │   ├── urls.py
│   │   │   ├── validators.py
│   │   │   │   ├── PasswordStrengthValidator {}
│   │   │   │   │   ├── __init__(self, min_length, require_uppercase, require_lowercase, require_digit, require_special)
│   │   │   │   │   ├── validate(self, password, user)
│   │   │   │   │   └── get_help_text(self)
│   │   │   │   └── BreachedPasswordValidator {}
│   │   │   │       ├── __init__(self, min_pwned_count)
│   │   │   │       ├── validate(self, password, user)
│   │   │   │       └── get_help_text(self)
│   │   │   └── views.py
│   │   │       ├── login_view(request)
│   │   │       ├── logout_view(request)
│   │   │       ├── CustomSignupForm {}
│   │   │       │   └── Meta {}
│   │   │       ├── signup_view(request)
│   │   │       └── profile_view(request)
│   │   ├── Dockerfile
│   │   ├── docker-compose.yml
│   │   ├── entrypoint.sh
│   │   ├── manage.py
│   │   │   └── main()
│   │   └── requirements.txt
│   ├── tests
│   ├── utils
│   │   ├── __init__.py
│   │   ├── env_utils.py
│   │   │   ├── initialize_env()
│   │   │   ├── _run_debug_if_enabled()
│   │   │   ├── get_env(key, default, from_env_file)
│   │   │   ├── is_feature_enabled(env_value)
│   │   │   ├── validate_required_vars(component)
│   │   │   ├── validate_production_settings()
│   │   │   ├── _update_dotenv_path()
│   │   │   ├── _load_env_file(env_path)
│   │   │   ├── _apply_env_vars_to_environ(env_vars_from_file)
│   │   │   ├── _log_loaded_env_vars(env_vars_from_file)
│   │   │   ├── _handle_test_environment(env_vars_from_file, env_vars)
│   │   │   ├── refresh_env_cache()
│   │   │   └── debug_env_cache()
│   │   ├── error_manager.py
│   │   │   ├── CommandError {}
│   │   │   │   └── __init__(self, message, details, recovery)
│   │   │   ├── ConfigurationError {}
│   │   │   ├── EnvironmentError {}
│   │   │   ├── DependencyError {}
│   │   │   ├── ServiceError {}
│   │   │   ├── ProjectError {}
│   │   │   ├── ValidationError {}
│   │   │   ├── UnknownCommandError {}
│   │   │   ├── DatabaseError {}
│   │   │   ├── NetworkError {}
│   │   │   ├── register_error_handler(exception_type)
│   │   │   ├── handle_subprocess_error(exc)
│   │   │   ├── handle_file_not_found(exc)
│   │   │   ├── handle_permission_error(exc)
│   │   │   ├── convert_exception(exc)
│   │   │   ├── handle_command_error(error, logger, exit_on_error)
│   │   │   └── format_error_context(exc, context)
│   │   ├── help_manager.py
│   │   │   └── show_manage_help()
│   │   ├── log_scanner.py
│   │   │   ├── LogPattern {}
│   │   │   │   └── __init__(self, pattern, severity, description, context_lines)
│   │   │   ├── LogIssue {}
│   │   │   │   ├── __init__(self, message, severity, source, line_number, context)
│   │   │   │   └── __str__(self)
│   │   │   └── LogScanner {}
│   │   │       ├── __init__(self, project_dir, logger)
│   │   │       ├── _find_build_log_path(self)
│   │   │       ├── _filter_docker_warnings(self, warnings)
│   │   │       ├── _check_for_docker_warnings(self, content)
│   │   │       ├── scan_build_log(self)
│   │   │       ├── scan_container_logs(self)
│   │   │       ├── scan_migration_logs(self)
│   │   │       ├── scan_all_logs(self)
│   │   │       ├── _scan_file(self, file_path, source_type)
│   │   │       ├── _scan_content(self, content, source_type)
│   │   │       ├── _check_static_files_false_positive(self, message)
│   │   │       ├── _check_postgres_auth_false_positive(self, message)
│   │   │       ├── _check_postgres_status_false_positive(self, message)
│   │   │       ├── _check_django_migration_false_positive(self, message, lines, line_number)
│   │   │       ├── _check_docker_connection_false_positive(self, message, lines, line_number)
│   │   │       ├── _check_migration_error_false_positive(self, message, source_type, lines, line_number)
│   │   │       ├── _is_false_positive(self, message, source_type, lines, line_number)
│   │   │       ├── generate_summary(self)
│   │   │       ├── _print_no_logs_message(self)
│   │   │       ├── _print_no_issues_message(self)
│   │   │       ├── _print_issue_counts(self, total, error_count, warning_count)
│   │   │       ├── _print_issue_context(self, issue)
│   │   │       ├── _print_critical_issues(self, error_issues, has_real_errors)
│   │   │       ├── _print_warning_issues(self, warning_issues)
│   │   │       ├── print_summary(self)
│   │   │       └── _analyze_migration_issue(self, issue)
│   │   ├── logging_manager.py
│   │   │   └── LoggingManager {}
│   │   │       ├── get_logger()
│   │   │       ├── setup_logging(project_dir, log_level)
│   │   │       ├── _add_file_handler(logger, project_dir, log_level)
│   │   │       └── _log_system_info(logger, project_dir)
│   │   ├── message_manager.py
│   │   │   ├── MessageType {}
│   │   │   └── MessageManager {}
│   │   │       ├── _use_color(cls)
│   │   │       ├── _use_icons(cls)
│   │   │       ├── _format_message(cls, message, msg_type, use_icon)
│   │   │       ├── get_template(cls, template_key)
│   │   │       ├── success(cls, message, logger)
│   │   │       ├── error(cls, message, logger)
│   │   │       ├── info(cls, message, logger)
│   │   │       ├── warning(cls, message, logger)
│   │   │       ├── debug(cls, message, logger)
│   │   │       ├── template(cls, template_key, msg_type, logger)
│   │   │       ├── print_command_result(cls, service, port)
│   │   │       └── print_recovery_suggestion(cls, suggestion_key)
│   │   └── template_generator.py
│   │       ├── copy_sync_modules(project_dir, quickscale_dir, logger)
│   │       ├── is_binary_file(file_path)
│   │       ├── render_template(content, variables)
│   │       ├── process_file_templates(project_dir, template_variables, logger)
│   │       ├── _calculate_relative_import_path(target_module_path, file_directory)
│   │       ├── _update_import_in_file(file_path, import_pattern, target_module_path, logger)
│   │       ├── _should_process_file(file_path, target_file_path, processed_files)
│   │       ├── fix_imports(project_dir, logger)
│   │       └── remove_duplicated_templates(project_dir, logger)
│   ├── __init__.py
│   └── cli.py
│       ├── QuickScaleArgumentParser {}
│       │   └── error(self, message)
│       ├── create_parser()
│       ├── setup_init_parser(subparsers)
│       ├── setup_service_parsers(subparsers)
│       ├── setup_utility_parsers(subparsers)
│       ├── setup_logs_parser(subparsers)
│       ├── setup_manage_parser(subparsers)
│       ├── setup_help_and_version_parsers(subparsers)
│       ├── handle_init_command(args)
│       ├── handle_check_command_output(args)
│       ├── handle_log_scan_output(args)
│       └── main()
├── quickscale.egg-info
│   ├── PKG-INFO
│   ├── SOURCES.txt
│   ├── dependency_links.txt
│   ├── entry_points.txt
│   ├── requires.txt
│   └── top_level.txt
├── tests
│   ├── core
│   │   ├── stripe
│   │   │   ├── __init__.py
│   │   │   └── settings.py
│   │   ├── __init__.py
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── e2e
│   │   ├── support
│   │   │   ├── test_project_template
│   │   │   │   └── core
│   │   │   ├── __init__.py
│   │   │   └── command_runner.py
│   │   │       └── run_quickscale_command()
│   │   ├── __init__.py
│   │   ├── test_auth_e2e.py
│   │   │   └── TestAuthE2E {}
│   │   │       ├── setUp(self)
│   │   │       ├── test_login_page_loads(self)
│   │   │       ├── test_signup_page_loads(self)
│   │   │       ├── test_login_with_valid_credentials(self)
│   │   │       ├── test_login_with_invalid_credentials(self)
│   │   │       ├── test_password_reset_request(self)
│   │   │       ├── test_signup_with_valid_data(self)
│   │   │       ├── test_signup_with_invalid_data(self)
│   │   │       └── test_signup_with_existing_email(self)
│   │   ├── test_django_commands.py
│   │   │   └── TestDjangoCommands {}
│   │   │       ├── check_docker(self)
│   │   │       ├── test_project(self, tmp_path_factory)
│   │   │       └── in_project_dir(self, project_dir)
│   │   ├── test_env_utils_e2e.py
│   │   │   └── TestEnvUtilsE2E {}
│   │   │       ├── temp_env_files(self)
│   │   │       ├── test_env_file_loading(self, temp_env_files)
│   │   │       ├── test_feature_enabled_check(self, temp_env_files)
│   │   │       ├── test_env_example_fallback(self, temp_env_files)
│   │   │       ├── test_cache_refresh(self, temp_env_files)
│   │   │       ├── test_direct_dotenv_values(self, temp_env_files)
│   │   │       ├── test_module_initialization(self, temp_env_files)
│   │   │       ├── test_env_example_copied_to_env(self)
│   │   │       └── test_init_and_up_env_loading(self)
│   │   ├── test_init_env_loading.py
│   │   │   └── TestEnvFileLoading {}
│   │   │       ├── test_project_dir(self)
│   │   │       ├── test_env_example_copied_to_env(self, test_project_dir)
│   │   │       └── test_env_reload_after_changes(self, test_project_dir)
│   │   ├── test_init_up_env_loading.py
│   │   │   └── TestInitUpEnvLoading {}
│   │   │       ├── check_docker(self)
│   │   │       ├── clean_test_env(self, tmp_path)
│   │   │       └── test_init_and_up_env_loading(self, clean_test_env)
│   │   ├── test_real_lifecycle.py
│   │   │   └── TestRealLifecycle {}
│   │   │       ├── verify_docker(self)
│   │   │       ├── is_port_in_use(self, port)
│   │   │       ├── assert_containers_running(self, project_name)
│   │   │       ├── find_available_ports(self)
│   │   │       ├── fix_dockerfile_netcat(self, project_dir)
│   │   │       ├── _setup_project_directory(self, tmp_path, project_name, web_port, pg_port)
│   │   │       ├── _ensure_clean_environment(self)
│   │   │       ├── _start_services_and_verify(self, project_name, web_port)
│   │   │       ├── _initialize_project(self, tmp_path, project_name, web_port, pg_port)
│   │   │       ├── real_project(self, tmp_path_factory)
│   │   │       ├── test_01_verify_services_after_init(self, real_project)
│   │   │       ├── test_02_down_command(self, real_project)
│   │   │       ├── test_03_up_command(self, real_project)
│   │   │       ├── test_04_project_ps_command(self, real_project)
│   │   │       ├── test_05_project_logs_command(self, real_project)
│   │   │       ├── test_06_project_shell_command(self, real_project)
│   │   │       ├── test_07_django_manage_command(self, real_project)
│   │   │       ├── test_08_django_manage_test(self, real_project)
│   │   │       ├── test_09_django_manage_check(self, real_project)
│   │   │       └── test_10_django_manage_help(self, real_project)
│   │   └── test_simplified_lifecycle.py
│   │       └── TestSimplifiedLifecycle {}
│   │           ├── test_cli_version(self)
│   │           ├── test_cli_help(self)
│   │           └── test_cli_check(self)
│   ├── integration
│   │   ├── __init__.py
│   │   ├── test_auth_integration.py
│   │   │   ├── mock_user()
│   │   │   ├── mock_request()
│   │   │   ├── mock_social_account()
│   │   │   ├── TestAuthenticationFlow {}
│   │   │   │   ├── test_signup_flow(self, mock_class)
│   │   │   │   ├── test_login_flow(self, mock_class)
│   │   │   │   ├── test_password_reset_flow(self, mock_class)
│   │   │   │   └── test_profile_update_flow(self, mock_class)
│   │   │   ├── TestSocialAuthentication {}
│   │   │   │   ├── test_social_account_connection(self, mock_class, mock_user, mock_social_account)
│   │   │   │   ├── test_social_account_data_retrieval(self, mock_class, mock_social_account)
│   │   │   │   └── test_pre_social_login_signal(self, mock_class, mock_social_account)
│   │   │   └── TestIntegrationWithDjangoAllauth {}
│   │   │       ├── test_custom_adapter_integration(self, mock_class)
│   │   │       └── test_custom_social_adapter_integration(self, mock_class, mock_social_account)
│   │   ├── test_auth_utils.py
│   │   │   └── patch_django_for_e2e_testing()
│   │   ├── test_cli_error_handling.py
│   │   │   ├── TestCLIErrorHandling {}
│   │   │   │   ├── test_unknown_command_error(self, capsys)
│   │   │   │   ├── test_missing_required_argument(self, script_runner, capsys)
│   │   │   │   ├── test_project_not_found_error(self, capsys, tmp_path)
│   │   │   │   └── test_validation_error_empty_manage(self, capsys)
│   │   │   └── TestArgumentParserErrorHandling {}
│   │   │       ├── test_argument_parsing_error(self)
│   │   │       └── test_invalid_choice_error(self)
│   │   ├── test_cli_integration.py
│   │   │   └── TestCLIIntegration {}
│   │   │       ├── test_version_command(self, script_runner)
│   │   │       ├── test_help_command(self, script_runner)
│   │   │       ├── test_invalid_command(self, script_runner)
│   │   │       ├── test_project_workflow(self, script_runner, tmp_path)
│   │   │       ├── test_end_user_workflow_cli_part(self, mock_init_execute, mock_subprocess_run, script_runner, tmp_path)
│   │   │       ├── test_docker_services_cli_part(self, mock_subprocess_run, script_runner, tmp_path)
│   │   │       ├── test_environment_validation_cli_integration(self, mock_validate, script_runner, tmp_path)
│   │   │       └── test_port_fallback_functionality(self, mock_subprocess_run, mock_is_port_in_use, script_runner, tmp_path)
│   │   ├── test_cli_messages.py
│   │   │   ├── mock_message_manager()
│   │   │   └── TestCliMessageConsistency {}
│   │   │       ├── test_help_command_uses_message_manager(self, mock_message_manager)
│   │   │       ├── test_version_command_uses_message_manager(self, mock_message_manager)
│   │   │       ├── test_error_handling_uses_message_manager(self, mock_message_manager)
│   │   │       ├── test_handle_log_scan_output_uses_message_manager(self, mock_message_manager)
│   │   │       ├── test_handle_init_command_uses_message_manager(self, mock_message_manager)
│   │   │       └── test_handle_check_command_output_uses_message_manager(self, mock_message_manager)
│   │   ├── test_init_integration.py
│   │   │   └── TestInitIntegration {}
│   │   │       ├── test_init_command_basics(self, script_runner, tmp_path)
│   │   │       ├── test_init_command_with_existing_dir(self, script_runner, tmp_path)
│   │   │       ├── test_init_command_invalid_name(self, script_runner, tmp_path)
│   │   │       └── test_init_creates_env_file(self, script_runner, tmp_path)
│   │   ├── test_message_manager_integration.py
│   │   │   ├── mock_project_exists()
│   │   │   ├── mock_subprocess_run()
│   │   │   ├── mock_stdout()
│   │   │   └── TestMessageManagerIntegration {}
│   │   │       ├── test_service_status_command_with_message_manager(self, mock_project_exists, mock_subprocess_run, capfd)
│   │   │       ├── test_service_logs_command_with_message_manager(self, mock_project_exists, mock_subprocess_run, capfd)
│   │   │       ├── test_project_not_found_message(self, capfd)
│   │   │       ├── test_success_output_format(self, capfd)
│   │   │       ├── test_error_output_format(self, capfd)
│   │   │       └── test_template_based_messages(self, capfd)
│   │   └── test_project_settings.py
│   │       ├── MockSettings {}
│   │       ├── MockResponse {}
│   │       │   └── __init__(self)
│   │       └── ProjectSettingsTests {}
│   │           ├── setUp(self)
│   │           ├── tearDown(self)
│   │           ├── test_project_name_default(self)
│   │           ├── test_project_name_override(self)
│   │           ├── test_project_name_from_env(self)
│   │           ├── test_context_processor_provides_project_name(self)
│   │           ├── test_template_renders_project_name(self)
│   │           ├── test_template_uses_custom_project_name(self)
│   │           ├── test_invalid_project_name(self)
│   │           ├── test_missing_context_processor(self)
│   │           ├── test_long_project_name(self)
│   │           └── test_special_chars_project_name(self)
│   ├── unit
│   │   ├── commands
│   │   │   ├── test_command_utils.py
│   │   │   │   └── TestCommandUtils {}
│   │   │   │       ├── test_wait_for_postgres_with_valid_user(self, mock_run)
│   │   │   │       ├── test_wait_for_postgres_with_empty_user(self, mock_run)
│   │   │   │       ├── test_wait_for_postgres_with_root_user(self, mock_run)
│   │   │   │       ├── test_fix_permissions_with_valid_user(self, mock_run)
│   │   │   │       ├── test_fix_permissions_with_empty_user(self, mock_run)
│   │   │   │       ├── test_fix_permissions_with_root_user(self, mock_run)
│   │   │   │       └── test_fix_permissions_with_no_user(self, mock_run)
│   │   │   ├── test_destroy_command.py
│   │   │   │   └── TestDestroyProjectCommand {}
│   │   │   │       ├── setUp(self)
│   │   │   │       ├── test_confirm_destruction_confirmed(self)
│   │   │   │       ├── test_confirm_destruction_denied(self)
│   │   │   │       ├── test_execute_with_project_confirmed(self, mock_get_state, mock_stop, mock_rmtree, mock_chdir)
│   │   │   │       ├── test_execute_with_project_cancelled(self, mock_get_state)
│   │   │   │       ├── test_execute_with_containers_and_directory(self, mock_get_state, mock_stop, mock_rmtree, mock_input)
│   │   │   │       ├── test_execute_with_containers_and_directory_cancelled(self, mock_get_state, mock_input)
│   │   │   │       ├── test_execute_with_containers_only(self, mock_get_state, mock_stop, mock_input)
│   │   │   │       ├── test_execute_with_containers_only_cancelled(self, mock_get_state, mock_input)
│   │   │   │       ├── test_execute_with_no_project_or_containers(self, mock_get_state, mock_print)
│   │   │   │       ├── test_execute_with_subprocess_error(self, mock_get_state, mock_get_logger, mock_message_manager_error)
│   │   │   │       └── test_execute_with_general_exception(self, mock_get_state, mock_get_logger, mock_message_manager_error)
│   │   │   ├── test_environment_validation.py
│   │   │   │   ├── TestEnvironmentValidation {}
│   │   │   │   │   ├── init_command(self)
│   │   │   │   │   └── test_validation_functionality_placeholder(self)
│   │   │   │   └── TestInitCommandValidation {}
│   │   │   │       ├── init_command(self)
│   │   │   │       ├── test_validate_project_name_valid(self, init_command)
│   │   │   │       ├── test_validate_project_name_invalid(self, init_command)
│   │   │   │       ├── test_validate_project_dir_exists(self, init_command)
│   │   │   │       └── test_init_command_template_missing(self, mock_exists, mock_copytree, init_command)
│   │   │   ├── test_project_commands.py
│   │   │   │   └── TestInitCommand {}
│   │   │   │       ├── init_command(self)
│   │   │   │       ├── test_init_command_success(self, mock_mkdir, mock_copytree, init_command)
│   │   │   │       ├── test_env_file_creation(self, mock_copy2, mock_mkdir, mock_copytree, init_command)
│   │   │   │       └── test_template_variables(self, mock_truediv, mock_read_text, init_command)
│   │   │   ├── test_project_name.py
│   │   │   │   ├── init_command()
│   │   │   │   ├── test_env()
│   │   │   │   ├── test_project_name_in_env_file(mock_write_text, mock_read_text, mock_copy2, mock_mkdir, mock_copytree, init_command, test_env)
│   │   │   │   ├── test_project_name_default_in_env_file(mock_write_text, mock_read_text, mock_copy2, mock_mkdir, mock_copytree, init_command, test_env)
│   │   │   │   └── test_project_name_in_templates(mock_write_text, mock_read_text, mock_copy2, mock_mkdir, mock_copytree, init_command, test_env)
│   │   │   └── test_service_commands_message_manager.py
│   │   │       ├── mock_message_manager()
│   │   │       ├── mock_project_not_found()
│   │   │       ├── mock_project_found()
│   │   │       └── TestServiceCommandsMessageManager {}
│   │   │           ├── test_up_command_project_not_found(self, mock_message_manager, mock_project_not_found)
│   │   │           ├── test_down_command_project_not_found(self, mock_message_manager, mock_project_not_found)
│   │   │           ├── test_logs_command_project_not_found(self, mock_message_manager, mock_project_not_found)
│   │   │           ├── test_status_command_project_not_found(self, mock_message_manager, mock_project_not_found)
│   │   │           ├── test_down_command_success(self, mock_message_manager, mock_project_found)
│   │   │           ├── test_status_command_success(self, mock_message_manager, mock_project_found)
│   │   │           ├── test_up_command_retry_failure(self, mock_message_manager, mock_project_found)
│   │   │           └── test_start_services_with_retry_failure(self, mock_message_manager, mock_project_found)
│   │   ├── fixtures
│   │   │   └── docker-compose.yml
│   │   ├── utils
│   │   │   ├── test_env_utils.py
│   │   │   │   ├── TestGetEnv {}
│   │   │   │   │   ├── test_get_env_existing_key(self)
│   │   │   │   │   ├── test_get_env_default_value(self)
│   │   │   │   │   ├── test_get_env_from_file(self)
│   │   │   │   │   ├── test_get_env_direct_from_environ(self)
│   │   │   │   │   └── test_get_env_with_comment(self)
│   │   │   │   ├── TestIsFeatureEnabled {}
│   │   │   │   │   ├── test_is_feature_enabled_values(self, value, expected)
│   │   │   │   │   ├── test_is_feature_enabled_none(self)
│   │   │   │   │   └── test_is_feature_enabled_non_string(self)
│   │   │   │   ├── TestRefreshEnvCache {}
│   │   │   │   │   ├── test_refresh_env_cache_success(self, mock_debug, mock_handle_test, mock_log, mock_apply, mock_load_dotenv, mock_load_file, mock_update_path)
│   │   │   │   │   ├── test_refresh_env_cache_empty_file(self, mock_logger, mock_load_file, mock_update_path)
│   │   │   │   │   └── test_refresh_env_cache_exception(self, mock_logger, mock_load_file, mock_update_path)
│   │   │   │   ├── TestHelperFunctions {}
│   │   │   │   │   ├── test_update_dotenv_path(self)
│   │   │   │   │   ├── test_load_env_file_success(self)
│   │   │   │   │   ├── test_load_env_file_not_exists(self)
│   │   │   │   │   ├── test_apply_env_vars_to_environ(self)
│   │   │   │   │   ├── test_log_loaded_env_vars(self)
│   │   │   │   │   └── test_handle_test_environment(self)
│   │   │   │   └── TestDebugEnvCache {}
│   │   │   │       └── test_debug_env_cache(self, mock_logger, mock_get_env)
│   │   │   ├── test_help_manager.py
│   │   │   │   └── TestHelpManager {}
│   │   │   │       └── test_show_manage_help(self, mock_info)
│   │   │   ├── test_log_scanner.py
│   │   │   │   ├── TestLogPattern {}
│   │   │   │   │   ├── test_pattern_initialization(self)
│   │   │   │   │   └── test_pattern_matching(self)
│   │   │   │   ├── TestLogIssue {}
│   │   │   │   │   ├── test_issue_initialization(self)
│   │   │   │   │   └── test_issue_string_representation(self)
│   │   │   │   └── TestLogScanner {}
│   │   │   │       ├── temp_project_dir(self)
│   │   │   │       ├── mock_logger(self)
│   │   │   │       ├── scanner(self, temp_project_dir, mock_logger)
│   │   │   │       ├── test_scanner_initialization(self, scanner, temp_project_dir, mock_logger)
│   │   │   │       ├── test_scan_file(self, scanner, temp_project_dir)
│   │   │   │       ├── test_scan_content(self, scanner)
│   │   │   │       ├── test_false_positive_checks(self, scanner)
│   │   │   │       ├── test_analyze_migration_issue(self, scanner)
│   │   │   │       ├── test_print_issue_context(self, scanner)
│   │   │   │       ├── test_print_critical_issues(self, scanner)
│   │   │   │       ├── test_print_warning_issues(self, scanner)
│   │   │   │       ├── test_generate_summary(self, scanner)
│   │   │   │       ├── test_empty_summary(self, scanner)
│   │   │   │       ├── test_summary_no_logs_accessed(self, scanner)
│   │   │   │       ├── test_filtering_trust_authentication_warnings(self, scanner)
│   │   │   │       ├── test_print_summary_no_issues(self, mock_print, scanner)
│   │   │   │       ├── test_print_summary_with_issues(self, mock_print, scanner)
│   │   │   │       ├── test_print_summary_no_logs_accessed(self, mock_print, scanner)
│   │   │   │       ├── test_scan_container_logs(self, mock_run, scanner)
│   │   │   │       ├── test_scan_migration_logs(self, mock_run, scanner)
│   │   │   │       └── test_scan_all_logs(self, scanner)
│   │   │   ├── test_logging_manager.py
│   │   │   │   └── TestLoggingManager {}
│   │   │   │       ├── setUp(self)
│   │   │   │       ├── tearDown(self)
│   │   │   │       ├── test_get_logger(self)
│   │   │   │       ├── test_get_logger_singleton(self, mock_getLogger)
│   │   │   │       ├── test_setup_logging(self, mock_Formatter, mock_FileHandler, mock_getLogger)
│   │   │   │       ├── test_log_system_info(self, mock_python_version, mock_release, mock_system, mock_exists, mock_getLogger)
│   │   │   │       ├── test_setup_logging_with_invalid_log_level(self)
│   │   │   │       ├── test_setup_logging_creates_log_directory(self, mock_mkdir)
│   │   │   │       └── test_add_file_handler(self, mock_FileHandler)
│   │   │   ├── test_message_manager.py
│   │   │   │   ├── mock_stdout()
│   │   │   │   ├── mock_logger()
│   │   │   │   ├── mock_color_detection()
│   │   │   │   └── TestMessageManager {}
│   │   │   │       ├── test_get_template(self)
│   │   │   │       ├── test_success_message(self, capsys, mock_logger, mock_color_detection)
│   │   │   │       ├── test_error_message(self, capsys, mock_logger, mock_color_detection)
│   │   │   │       ├── test_info_message(self, capsys, mock_logger, mock_color_detection)
│   │   │   │       ├── test_warning_message(self, capsys, mock_logger, mock_color_detection)
│   │   │   │       ├── test_debug_message(self, capsys, mock_logger, mock_color_detection)
│   │   │   │       ├── test_template_method(self, capsys, mock_logger, mock_color_detection)
│   │   │   │       ├── test_print_command_result(self, capsys, mock_color_detection)
│   │   │   │       ├── test_print_recovery_suggestion(self, capsys, mock_color_detection)
│   │   │   │       └── test_format_message_without_color(self, mock_stdout)
│   │   │   └── test_message_manager_color.py
│   │   │       ├── mock_stdout_tty()
│   │   │       ├── mock_stdout_not_tty()
│   │   │       └── TestMessageManagerColorAndIcons {}
│   │   │           ├── test_use_color_with_tty(self, mock_stdout_tty)
│   │   │           ├── test_use_color_without_tty(self, mock_stdout_not_tty)
│   │   │           ├── test_use_color_respects_no_color_env(self, mock_stdout_tty)
│   │   │           ├── test_use_icons_default(self)
│   │   │           ├── test_use_icons_respects_no_icons_env(self)
│   │   │           ├── test_format_message_with_color_and_icon(self, mock_stdout_tty)
│   │   │           ├── test_format_message_with_color_without_icon(self, mock_stdout_tty)
│   │   │           ├── test_format_message_without_color_with_icon(self, mock_stdout_not_tty)
│   │   │           └── test_format_message_without_color_without_icon(self, mock_stdout_not_tty)
│   │   ├── __init__.py
│   │   ├── pytest_setup.py
│   │   ├── test_auth_components.py
│   │   │   ├── _PasswordStrengthValidator {}
│   │   │   │   ├── __init__(self, min_length, require_uppercase, require_lowercase, require_digit, require_special)
│   │   │   │   ├── validate(self, password, user)
│   │   │   │   └── get_help_text(self)
│   │   │   ├── MockPasswordStrengthValidator()
│   │   │   ├── MockBreachedPasswordValidator()
│   │   │   ├── MockCustomUserManager()
│   │   │   ├── MockAccountAdapter()
│   │   │   ├── MockSocialAccountAdapter()
│   │   │   ├── PermissionDenied {}
│   │   │   ├── TestPasswordValidators {}
│   │   │   │   ├── test_password_strength_validator(self, MockPasswordStrengthValidator)
│   │   │   │   ├── test_breached_password_validator(self, MockBreachedPasswordValidator)
│   │   │   │   └── test_validator_help_text(self, MockPasswordStrengthValidator, MockBreachedPasswordValidator)
│   │   │   ├── TestCustomUserManager {}
│   │   │   │   ├── test_create_user_without_email(self, MockCustomUserManager)
│   │   │   │   ├── test_create_user_normalizes_email(self, MockCustomUserManager)
│   │   │   │   ├── test_create_superuser(self, MockCustomUserManager)
│   │   │   │   ├── test_create_superuser_enforces_staff_status(self, MockCustomUserManager)
│   │   │   │   └── test_create_superuser_enforces_superuser_status(self, MockCustomUserManager)
│   │   │   ├── TestAccountAdapter {}
│   │   │   │   ├── test_is_open_for_signup(self, MockAccountAdapter)
│   │   │   │   └── test_populate_username(self, MockAccountAdapter)
│   │   │   └── TestSocialAccountAdapter {}
│   │   │       ├── test_is_open_for_signup(self, MockSocialAccountAdapter)
│   │   │       ├── test_pre_social_login(self, MockSocialAccountAdapter)
│   │   │       └── test_populate_user(self, MockSocialAccountAdapter)
│   │   ├── test_auth_forms.py
│   │   │   ├── MockCustomLoginForm()
│   │   │   ├── MockCustomSignupForm()
│   │   │   ├── MockCustomResetPasswordForm()
│   │   │   ├── MockCustomResetPasswordKeyForm()
│   │   │   ├── MockCustomChangePasswordForm()
│   │   │   ├── MockProfileForm()
│   │   │   ├── TestCustomLoginForm {}
│   │   │   │   └── test_initialization(self, MockCustomLoginForm)
│   │   │   ├── TestCustomSignupForm {}
│   │   │   │   ├── test_required_fields(self, MockCustomSignupForm)
│   │   │   │   ├── test_field_styling(self, MockCustomSignupForm)
│   │   │   │   └── test_save_method(self, MockCustomSignupForm)
│   │   │   ├── TestCustomResetPasswordForm {}
│   │   │   │   └── test_initialization(self, MockCustomResetPasswordForm)
│   │   │   ├── TestCustomResetPasswordKeyForm {}
│   │   │   │   └── test_initialization(self, MockCustomResetPasswordKeyForm)
│   │   │   ├── TestCustomChangePasswordForm {}
│   │   │   │   └── test_initialization(self, MockCustomChangePasswordForm)
│   │   │   └── TestProfileForm {}
│   │   │       └── test_initialization(self, MockProfileForm)
│   │   ├── test_cli_commands.py
│   │   │   └── TestCLICommands {}
│   │   │       ├── test_version_command(self, capsys)
│   │   │       ├── test_help_command(self, capsys)
│   │   │       ├── test_check_command(self)
│   │   │       ├── test_invalid_command(self, capsys)
│   │   │       └── test_command_execution_error(self, capsys)
│   │   ├── test_cli_config.py
│   │   │   └── TestCLIConfig {}
│   │   │       ├── test_config_loading(self, mock_config_file)
│   │   │       ├── test_config_with_custom_path(self)
│   │   │       ├── test_save_config(self, tmp_path)
│   │   │       └── test_config_validation(self, capsys)
│   │   ├── test_cli_error_handling.py
│   │   │   └── TestCLIErrorHandling {}
│   │   │       ├── test_key_error_handling(self, capsys)
│   │   │       ├── test_general_exception_handling(self, capsys)
│   │   │       ├── test_successful_command_execution(self, capsys)
│   │   │       └── test_check_command_with_output(self, capsys)
│   │   ├── test_cli_params.py
│   │   │   └── TestCLIParameters {}
│   │   │       ├── test_command_parameters(self, args, expected_func, expected_kwargs)
│   │   │       ├── _validate_function_calls(self, mock_func, expected_kwargs)
│   │   │       └── test_help_command_general(self, capsys)
│   │   ├── test_command_base.py
│   │   │   ├── CommandForTesting {}
│   │   │   │   ├── execute(self)
│   │   │   │   └── raise_exception(self, exception)
│   │   │   └── TestCommandBase {}
│   │   │       ├── test_handle_error_with_string(self)
│   │   │       ├── test_handle_error_with_exception(self)
│   │   │       ├── test_handle_error_with_recovery(self)
│   │   │       ├── test_handle_error_with_context(self)
│   │   │       ├── test_safe_execute(self)
│   │   │       └── test_exit_with_error(self)
│   │   ├── test_command_utils.py
│   │   │   ├── test_get_current_uid_gid()
│   │   │   ├── test_generate_secret_key()
│   │   │   ├── test_is_binary_file(tmp_path)
│   │   │   ├── test_copy_with_vars(tmp_path)
│   │   │   ├── test_copy_files_recursive(tmp_path)
│   │   │   ├── test_wait_for_postgres_success(mock_run, mock_sleep)
│   │   │   ├── test_wait_for_postgres_timeout(mock_run, mock_sleep)
│   │   │   ├── test_find_available_ports(mock_socket)
│   │   │   ├── test_fix_permissions(mock_run, tmp_path)
│   │   │   ├── test_find_available_port(mock_socket)
│   │   │   ├── test_check_port_availability(mock_socket)
│   │   │   ├── test_find_available_port_in_range(mock_socket)
│   │   │   ├── test_find_port_in_sequential_range()
│   │   │   ├── test_find_port_in_common_ranges()
│   │   │   ├── test_find_port_in_random_ranges()
│   │   │   ├── test_add_random_high_ports()
│   │   │   └── test_find_available_ports_fallback_strategies(mock_add_random, mock_random_ranges, mock_common_ranges, mock_sequential_range)
│   │   ├── test_config_manager.py
│   │   │   └── TestConfigManager {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_load_config_with_default_path(self)
│   │   │       ├── test_load_config_with_custom_path(self)
│   │   │       ├── test_save_config_with_default_path(self)
│   │   │       ├── test_save_config_with_custom_path(self)
│   │   │       ├── test_validate_config_with_valid_data(self)
│   │   │       ├── test_validate_config_with_invalid_data(self)
│   │   │       ├── test_find_default_config(self)
│   │   │       └── test_find_default_config_current_directory(self)
│   │   ├── test_dashboard_templates.py
│   │   │   └── DashboardTemplateTests {}
│   │   │       ├── setUp(self)
│   │   │       ├── test_product_admin_template_exists(self)
│   │   │       ├── test_product_detail_template_exists(self)
│   │   │       ├── test_urls_file_exists(self)
│   │   │       ├── test_views_file_exists(self)
│   │   │       ├── test_sync_products_url_in_urls_file(self)
│   │   │       ├── test_product_sync_url_in_urls_file(self)
│   │   │       ├── test_product_sync_view_exists(self)
│   │   │       ├── test_product_sync_view_has_redirect(self)
│   │   │       ├── test_sync_button_in_product_admin_template(self)
│   │   │       ├── test_sync_form_in_product_detail_template(self)
│   │   │       ├── test_csrf_token_in_product_admin_template(self)
│   │   │       ├── test_js_fetch_uses_csrf_token(self)
│   │   │       └── test_product_sync_view_handles_stripe_api(self)
│   │   ├── test_dashboard_views.py
│   │   │   ├── DashboardViewsWithStripeDisabledTests {}
│   │   │   │   ├── setUp(self)
│   │   │   │   ├── test_product_admin_page_loads_with_stripe_disabled(self)
│   │   │   │   └── test_product_refresh_fails_with_stripe_disabled(self)
│   │   │   ├── DashboardViewsWithStripeUnavailableTests {}
│   │   │   │   ├── setUp(self)
│   │   │   │   ├── test_product_admin_page_loads_with_stripe_unavailable(self)
│   │   │   │   └── test_product_refresh_fails_with_stripe_unavailable(self)
│   │   │   └── DashboardViewsWithStripeDatabaseErrorTests {}
│   │   │       ├── setUp(self)
│   │   │       ├── test_product_admin_page_handles_database_error(self)
│   │   │       └── test_product_refresh_handles_api_error(self)
│   │   ├── test_development_commands.py
│   │   │   └── TestDevelopmentCommandErrorHandling {}
│   │   │       ├── test_shell_command_error_handling(self)
│   │   │       ├── test_django_shell_command_error_handling(self)
│   │   │       └── test_manage_command_error_handling(self)
│   │   ├── test_development_commands_extended.py
│   │   │   ├── TestShellCommandExtended {}
│   │   │   │   ├── test_shell_command_without_project(self)
│   │   │   │   ├── test_shell_command_help_mode(self)
│   │   │   │   ├── test_django_shell_command_help_mode(self)
│   │   │   │   ├── test_shell_command_success(self)
│   │   │   │   ├── test_shell_command_with_command_success(self)
│   │   │   │   ├── test_django_shell_command_success(self)
│   │   │   │   └── test_shell_command_keyboard_interrupt(self)
│   │   │   └── TestManageCommandExtended {}
│   │   │       ├── test_manage_command_without_project(self)
│   │   │       ├── test_manage_command_no_args(self)
│   │   │       └── test_manage_command_success(self)
│   │   ├── test_env_template.py
│   │   │   ├── load_env_file_to_environ(env_file_path)
│   │   │   └── TestEnvTemplate {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_env_example_exists(self)
│   │   │       ├── test_env_example_loads_without_errors(self)
│   │   │       ├── test_get_env_retrieves_variables(self)
│   │   │       ├── test_is_feature_enabled_works_with_env_values(self)
│   │   │       ├── test_env_example_format_consistency(self)
│   │   │       ├── test_env_example_security_warnings(self)
│   │   │       ├── test_env_example_no_real_credentials(self)
│   │   │       └── test_env_example_log_level(self)
│   │   ├── test_environment_isolation.py
│   │   │   ├── load_env_file(env_file_path)
│   │   │   └── TestEnvironmentIsolation {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_environment_file_isolation(self, mock_open, mock_exists)
│   │   │       ├── test_environment_separation_in_settings(self)
│   │   │       └── test_validation_functions_environment_aware(self)
│   │   ├── test_error_manager.py
│   │   │   ├── TestErrorConversion {}
│   │   │   │   ├── test_convert_subprocess_error(self)
│   │   │   │   ├── test_convert_database_error(self)
│   │   │   │   ├── test_convert_file_not_found(self)
│   │   │   │   ├── test_convert_permission_error(self)
│   │   │   │   └── test_convert_unknown_error(self)
│   │   │   ├── TestErrorHandling {}
│   │   │   │   ├── test_handle_command_error(self, mock_exit, mock_recovery, mock_error)
│   │   │   │   ├── test_handle_error_no_exit(self, mock_recovery, mock_error)
│   │   │   │   └── test_error_hierarchy(self)
│   │   │   └── TestCommandErrorProperties {}
│   │   │       ├── test_exit_codes(self)
│   │   │       └── test_error_details(self)
│   │   ├── test_production_security.py
│   │   │   └── TestProductionSecurity {}
│   │   │       ├── test_production_requires_strong_secret_key(self)
│   │   │       ├── test_production_requires_specific_allowed_hosts(self)
│   │   │       └── test_secure_defaults(self)
│   │   ├── test_project_commands.py
│   │   │   ├── mock_init_command()
│   │   │   ├── mock_templates_dir(tmp_path)
│   │   │   ├── mock_destroy_command()
│   │   │   ├── test_init_command_project_creation(mock_init_command, tmp_path, monkeypatch)
│   │   │   ├── test_copy_with_vars_function(tmp_path)
│   │   │   ├── test_find_available_port_function(mock_socket)
│   │   │   ├── test_destroy_project_command(mock_destroy_command, tmp_path, monkeypatch)
│   │   │   ├── test_destroy_project_cancelled(mock_destroy_command)
│   │   │   ├── test_destroy_project_no_project(mock_destroy_command)
│   │   │   ├── mock_verification_command()
│   │   │   ├── test_verify_container_status(mock_verification_command, monkeypatch)
│   │   │   ├── test_verify_container_status_failure(mock_verification_command, monkeypatch)
│   │   │   ├── test_verify_database_connectivity(mock_verification_command, monkeypatch)
│   │   │   ├── test_verify_database_connectivity_failure(mock_verification_command, monkeypatch)
│   │   │   ├── test_verify_web_service(mock_verification_command, monkeypatch)
│   │   │   ├── test_verify_web_service_failure(mock_verification_command, monkeypatch)
│   │   │   └── test_verify_web_service_static_files_none(mock_verification_command, monkeypatch)
│   │   ├── test_project_manager.py
│   │   │   └── TestProjectManager {}
│   │   │       ├── test_get_project_root(self)
│   │   │       ├── test_check_project_exists_true(self)
│   │   │       ├── test_check_project_exists_false_with_message(self)
│   │   │       ├── test_check_project_exists_false_without_message(self)
│   │   │       ├── test_get_project_state_with_project(self)
│   │   │       ├── test_get_project_state_without_project(self)
│   │   │       ├── test_check_test_directory_exists(self)
│   │   │       ├── test_check_test_directory_not_exists(self)
│   │   │       ├── test_check_test_directory_not_dir(self)
│   │   │       ├── test_check_running_containers_with_containers(self)
│   │   │       ├── test_check_running_containers_without_containers(self)
│   │   │       ├── test_check_running_containers_with_empty_stdout(self)
│   │   │       ├── test_stop_containers(self)
│   │   │       ├── test_read_tracking_file_success(self)
│   │   │       ├── test_read_tracking_file_no_project_name(self)
│   │   │       ├── test_read_tracking_file_not_found(self)
│   │   │       ├── test_read_tracking_file_other_exception(self)
│   │   │       ├── test_write_tracking_file_success(self)
│   │   │       ├── test_write_tracking_file_exception(self)
│   │   │       ├── test_get_tracking_param_exists(self)
│   │   │       ├── test_get_tracking_param_not_exists(self)
│   │   │       ├── test_get_tracking_param_file_not_found(self)
│   │   │       └── test_get_project_name(self)
│   │   ├── test_project_manager_additional.py
│   │   │   └── TestProjectManagerAdditional {}
│   │   │       ├── test_check_running_containers_with_no_directory(self)
│   │   │       ├── test_check_running_containers_without_test_containers(self)
│   │   │       ├── test_check_running_containers_with_empty_output(self)
│   │   │       ├── test_stop_containers_with_exception(self)
│   │   │       ├── test_get_project_state_with_containers(self)
│   │   │       ├── test_write_tracking_file_real_file(self)
│   │   │       ├── test_read_tracking_file_malformed_json(self)
│   │   │       ├── test_get_tracking_param_non_string(self)
│   │   │       ├── test_get_project_name_with_empty_file(self)
│   │   │       ├── test_write_tracking_file_permission_error(self)
│   │   │       ├── test_read_tracking_file_with_permission_error(self)
│   │   │       └── test_read_tracking_file_with_unicode_decode_error(self)
│   │   ├── test_project_structure.py
│   │   │   ├── get_expected_structure_from_docs()
│   │   │   ├── get_actual_structure(root_dir)
│   │   │   ├── test_project_structure_matches_docs()
│   │   │   ├── get_template_structure_from_docs()
│   │   │   ├── get_actual_template_structure()
│   │   │   ├── test_template_structure_correctness()
│   │   │   ├── get_django_app_structure_from_docs()
│   │   │   ├── is_django_app(directory_path)
│   │   │   ├── test_django_apps_in_correct_locations()
│   │   │   ├── get_static_dirs_from_docs()
│   │   │   ├── is_static_file(file_path)
│   │   │   ├── test_static_files_in_correct_locations()
│   │   │   ├── get_docker_files_from_docs()
│   │   │   ├── get_docker_file_locations()
│   │   │   ├── test_docker_files_in_correct_locations()
│   │   │   └── test_no_nested_quickscale_directory()
│   │   ├── test_required_vars.py
│   │   │   └── TestRequiredVarsValidation {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── validate_required_vars(self, component)
│   │   │       ├── test_validate_required_vars_all_present(self)
│   │   │       ├── test_validate_required_vars_all_missing(self)
│   │   │       ├── test_validate_required_vars_some_missing(self)
│   │   │       ├── test_validate_required_vars_unknown_component(self)
│   │   │       ├── test_validate_required_vars_all_components(self)
│   │   │       ├── test_validate_required_vars_empty_component(self)
│   │   │       ├── test_required_vars_structure(self)
│   │   │       └── test_required_vars_completeness(self)
│   │   ├── test_secure_defaults.py
│   │   │   └── TestSecureDefaults {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_env_example_file_comments(self, mock_exists, mock_file)
│   │   │       ├── test_default_values_not_exposing_secrets(self)
│   │   │       ├── test_password_strength_requirements(self)
│   │   │       ├── test_security_headers_defaults(self)
│   │   │       └── test_cookie_security_defaults(self)
│   │   ├── test_service_commands.py
│   │   │   └── TestServiceCommandErrorHandling {}
│   │   │       ├── test_service_up_command_error_handling(self)
│   │   │       ├── test_service_down_command_error_handling(self)
│   │   │       ├── test_service_logs_command_error_handling(self)
│   │   │       ├── test_service_status_command_error_handling(self)
│   │   │       ├── test_env_file_port_update_error_handling(self)
│   │   │       ├── test_port_availability_check_web_port_available(self)
│   │   │       ├── test_port_availability_check_web_port_in_use_with_fallback(self)
│   │   │       ├── test_port_availability_check_web_port_in_use_without_fallback(self)
│   │   │       ├── test_port_availability_check_db_port_in_use_with_fallback(self)
│   │   │       ├── test_port_availability_check_db_port_in_use_without_fallback(self)
│   │   │       ├── test_port_availability_check_no_available_alternative(self)
│   │   │       ├── test_execute_with_port_availability_check(self)
│   │   │       ├── test_is_feature_enabled_truthy_values(self)
│   │   │       ├── test_is_feature_enabled_falsy_values(self)
│   │   │       ├── test_port_fallback_with_various_boolean_formats(self)
│   │   │       ├── test_is_feature_enabled_with_inline_comments(self)
│   │   │       ├── test_service_up_command_no_cache(self, mock_get_env_value, mock_print_service_info, mock_verify_services_running, mock_get_project_state)
│   │   │       └── test_service_up_command_default_cache(self, mock_get_env_value, mock_check_project_exists)
│   │   ├── test_service_commands_docker_compose.py
│   │   │   └── TestServiceCommandDockerComposePortHandling {}
│   │   │       ├── test_extract_port_values_custom(self)
│   │   │       ├── test_update_env_content_custom(self)
│   │   │       ├── test_update_docker_compose_ports_no_changes(self)
│   │   │       ├── test_update_docker_compose_ports_file_not_exists(self)
│   │   │       ├── test_update_docker_compose_ports_web_port(self)
│   │   │       ├── test_update_docker_compose_ports_pg_port(self)
│   │   │       ├── test_update_docker_compose_ports_both_ports(self)
│   │   │       ├── test_update_docker_compose_ports_single_line_format(self)
│   │   │       ├── test_update_docker_compose_ports_file_exception(self)
│   │   │       ├── test_print_service_info_no_ports(self)
│   │   │       ├── test_print_service_info_with_updated_web_port(self)
│   │   │       ├── test_check_and_update_web_port_available(self)
│   │   │       ├── test_check_and_update_web_port_in_use(self)
│   │   │       ├── test_check_and_update_pg_port_available(self)
│   │   │       └── test_check_and_update_pg_port_in_use(self)
│   │   ├── test_service_commands_docker_compose_fixed.py
│   │   │   └── TestServiceCommandDockerComposePortHandling {}
│   │   │       ├── test_extract_port_values(self)
│   │   │       ├── test_update_env_content(self)
│   │   │       ├── test_update_docker_compose_direct_port_specification(self)
│   │   │       ├── test_update_docker_compose_for_specific_edge_cases(self)
│   │   │       ├── test_print_service_info_success(self)
│   │   │       ├── test_print_service_info_with_db_port(self)
│   │   │       └── test_print_service_info_with_no_ports(self)
│   │   ├── test_service_commands_extended.py
│   │   │   └── TestServiceUpCommandExtended {}
│   │   │       ├── test_start_docker_services(self)
│   │   │       ├── test_handle_docker_process_error_non_special_code(self)
│   │   │       ├── test_handle_docker_process_error_special_code(self)
│   │   │       ├── test_get_docker_compose_logs_success(self)
│   │   │       ├── test_get_docker_compose_logs_exception(self)
│   │   │       ├── test_check_if_services_running_despite_error_success(self)
│   │   │       ├── test_check_if_services_running_despite_error_failure(self)
│   │   │       ├── test_check_if_services_running_despite_error_exception(self)
│   │   │       ├── test_verify_services_running_success(self)
│   │   │       ├── test_verify_services_running_db_missing(self)
│   │   │       ├── test_verify_services_running_exception(self)
│   │   │       ├── test_start_stopped_containers(self)
│   │   │       ├── test_start_container_success(self)
│   │   │       ├── test_start_container_failure(self)
│   │   │       ├── test_start_container_exception(self)
│   │   │       ├── test_find_ports_for_retry_first_attempt(self)
│   │   │       ├── test_find_ports_for_retry_later_attempts(self)
│   │   │       ├── test_find_ports_for_retry_empty_result(self)
│   │   │       ├── test_start_services_with_retry_first_attempt_success(self)
│   │   │       ├── test_start_services_with_retry_multiple_attempts(self)
│   │   │       ├── test_start_services_with_retry_all_attempts_fail(self)
│   │   │       ├── test_start_services_with_retry_prepare_environment_error(self)
│   │   │       ├── test_handle_retry_attempt_no_retry(self)
│   │   │       ├── test_handle_retry_attempt_first_retry(self)
│   │   │       ├── test_handle_retry_attempt_no_new_ports(self)
│   │   │       ├── test_prepare_environment_and_ports_success(self)
│   │   │       └── test_prepare_environment_and_ports_with_error(self)
│   │   ├── test_service_commands_find_ports.py
│   │   │   └── TestServiceCommandPortFinding {}
│   │   │       ├── test_find_available_ports_success(self)
│   │   │       ├── test_find_available_ports_with_offset(self)
│   │   │       ├── test_find_available_ports_insufficient(self)
│   │   │       ├── test_find_available_ports_empty(self)
│   │   │       ├── test_find_ports_for_retry_first_attempt(self)
│   │   │       ├── test_find_ports_for_retry_middle_attempt(self)
│   │   │       ├── test_find_ports_for_retry_last_attempt(self)
│   │   │       ├── test_is_port_in_use_available(self)
│   │   │       ├── test_is_port_in_use_unavailable(self)
│   │   │       ├── test_update_env_file_ports_file_not_exists(self)
│   │   │       ├── test_update_env_file_ports_no_port_changes(self)
│   │   │       ├── test_update_env_file_ports_with_changes(self)
│   │   │       ├── test_update_env_file_ports_file_exception(self)
│   │   │       ├── test_prepare_environment_and_ports_success_mock(self)
│   │   │       ├── test_prepare_environment_and_ports_with_exception_mock(self)
│   │   │       └── test_handle_retry_attempt_calls_update_docker_compose(self)
│   │   ├── test_service_commands_find_ports_fixed.py
│   │   │   └── TestServiceCommandPortFindingFixed {}
│   │   │       ├── test_prepare_environment_and_ports_simple(self)
│   │   │       ├── test_find_ports_for_retry_fallback_to_random(self)
│   │   │       ├── test_is_port_in_use_with_connect_ex_zero(self)
│   │   │       ├── test_is_port_in_use_with_connect_ex_non_zero(self)
│   │   │       ├── test_handle_socket_timeout_safely(self)
│   │   │       ├── test_handle_socket_error_safely(self)
│   │   │       ├── test_check_port_availability_all_ports_available(self)
│   │   │       ├── test_prepare_environment_and_ports_with_port_updates(self)
│   │   │       ├── test_find_ports_for_retry_with_retry_count(self)
│   │   │       ├── test_find_available_ports_with_random_number_generation(self)
│   │   │       ├── test_check_port_availability_with_both_ports_in_use(self)
│   │   │       ├── test_find_ports_for_retry_with_different_retry_counts(self)
│   │   │       └── test_prepare_environment_and_ports_with_complex_error(self)
│   │   ├── test_service_commands_operations.py
│   │   │   └── TestServiceOperations {}
│   │   │       ├── test_service_down_execute(self)
│   │   │       ├── test_service_down_execute_no_project(self)
│   │   │       ├── test_service_logs_execute_no_params(self)
│   │   │       ├── test_service_logs_execute_with_params(self)
│   │   │       ├── test_service_logs_execute_no_project(self)
│   │   │       ├── test_service_status_execute(self)
│   │   │       ├── test_service_status_execute_no_project(self)
│   │   │       ├── test_service_status_execute_with_error(self)
│   │   │       └── test_service_logs_execute_with_error(self)
│   │   ├── test_service_commands_retry.py
│   │   │   └── TestServiceCommandRetryHandling {}
│   │   │       ├── test_handle_retry_attempt_no_retries_needed(self)
│   │   │       ├── test_handle_retry_attempt_first_retry(self)
│   │   │       ├── test_handle_retry_attempt_no_new_ports(self)
│   │   │       ├── test_start_services_with_retry_first_attempt_success(self)
│   │   │       ├── test_start_services_with_retry_first_attempt_fails(self)
│   │   │       ├── test_start_services_with_retry_all_attempts_fail(self)
│   │   │       ├── test_start_services_with_retry_prepare_exception(self)
│   │   │       ├── test_execute_with_successful_start(self)
│   │   │       └── test_execute_without_project(self)
│   │   ├── test_service_commands_retry_fixed.py
│   │   │   └── TestServiceCommandRetryHandlingFixed {}
│   │   │       ├── test_handle_retry_attempt_simple(self)
│   │   │       ├── test_handle_retry_attempt_progressive(self)
│   │   │       ├── test_start_services_with_retry_basic_success(self)
│   │   │       ├── test_handle_docker_process_error_success(self)
│   │   │       ├── test_get_docker_compose_logs_success(self)
│   │   │       ├── test_check_if_services_running_despite_error_false(self)
│   │   │       ├── test_check_if_services_running_despite_error_true(self)
│   │   │       ├── test_check_if_services_running_despite_error_exception(self)
│   │   │       ├── test_handle_retry_attempt_properly_handled(self)
│   │   │       ├── test_handle_retry_attempt_with_different_retry_numbers(self)
│   │   │       ├── test_handle_retry_attempt_with_proactive_port_finding(self)
│   │   │       ├── test_start_services_with_retry_interrupted_by_exception(self)
│   │   │       ├── test_start_services_with_retry_special_error_code(self)
│   │   │       ├── test_services_with_retry_error_recovery(self)
│   │   │       ├── test_handle_docker_process_error_with_special_code(self)
│   │   │       ├── test_handle_docker_process_error_with_non_special_code(self)
│   │   │       ├── test_execute_with_custom_retry_count(self)
│   │   │       └── test_execute_with_custom_retry_count_from_env(self)
│   │   ├── test_settings_additional.py
│   │   │   └── TestSettingsAdditional {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_production_validation_with_is_production_undefined(self)
│   │   │       ├── test_production_validation_with_various_is_production_values(self)
│   │   │       ├── test_required_vars_structure(self)
│   │   │       ├── test_validate_production_settings_with_mixed_case_is_production(self)
│   │   │       ├── test_validate_production_settings_with_whitespace_in_is_production(self)
│   │   │       └── test_multiple_hosts_in_allowed_hosts(self)
│   │   ├── test_settings_validation.py
│   │   │   ├── validate_required_vars(component)
│   │   │   ├── validate_production_settings()
│   │   │   └── TestSettingsValidation {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_validate_required_vars_missing(self)
│   │   │       ├── test_validate_required_vars_non_existent_component(self)
│   │   │       ├── test_validate_required_vars_partial_missing(self)
│   │   │       ├── test_validate_required_vars_all_present(self)
│   │   │       ├── test_validate_production_settings_insecure_secret_key(self)
│   │   │       ├── test_validate_production_settings_wildcard_allowed_hosts(self)
│   │   │       ├── test_validate_production_settings_valid(self)
│   │   │       ├── test_env_defaults(self)
│   │   │       ├── test_env_overrides(self)
│   │   │       ├── test_validate_production_settings_insecure_db_password(self)
│   │   │       ├── test_validate_production_settings_without_email_tls(self)
│   │   │       ├── test_required_vars_by_component(self)
│   │   │       ├── test_actual_module_validate_production_settings(self)
│   │   │       └── test_actual_module_REQUIRED_VARS(self)
│   │   ├── test_stripe_config.py
│   │   │   └── StripeConfigurationTests {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_stripe_disabled_by_default(self)
│   │   │       └── test_stripe_settings_with_flag_enabled(self)
│   │   ├── test_stripe_customer.py
│   │   │   ├── MockStripeCustomer {}
│   │   │   │   ├── __init__(self, user, stripe_id)
│   │   │   │   └── __str__(self)
│   │   │   ├── mock_user()
│   │   │   └── TestStripeCustomerModel {}
│   │   │       ├── test_model_attributes(self)
│   │   │       ├── test_create_stripe_customer(self, mock_user)
│   │   │       ├── test_string_representation(self, mock_user)
│   │   │       ├── test_user_relationship(self, mock_user)
│   │   │       └── test_required_fields(self)
│   │   ├── test_stripe_direct_api.py
│   │   │   ├── MockResponse {}
│   │   │   │   ├── __init__(self, data, status_code)
│   │   │   │   └── json(self)
│   │   │   └── TestStripeDirectAPI {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_stripe_manager_singleton(self)
│   │   │       ├── test_stripe_manager_create_customer(self)
│   │   │       ├── test_stripe_manager_retrieve_customer(self)
│   │   │       ├── test_stripe_manager_create_product(self)
│   │   │       ├── test_stripe_manager_retrieve_product(self)
│   │   │       ├── test_stripe_manager_list_products(self)
│   │   │       ├── test_stripe_manager_update_product(self)
│   │   │       ├── test_stripe_manager_get_product_prices(self)
│   │   │       ├── test_stripe_manager_create_price(self)
│   │   │       ├── test_webhook_processing(self)
│   │   │       ├── test_webhook_method_not_allowed(self)
│   │   │       └── test_webhook_missing_signature(self)
│   │   ├── test_stripe_import.py
│   │   │   ├── test_stripe_import()
│   │   │   ├── test_custom_stripe_app_import(mock_is_feature_enabled, mock_get_env)
│   │   │   └── test_stripe_manager_init(mock_is_feature_enabled, mock_get_env)
│   │   ├── test_stripe_migration.py
│   │   │   └── TestStripeMigration {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_stripe_manager_initialization(self, mock_get_env, mock_is_feature_enabled)
│   │   │       ├── test_stripe_manager_direct_api_calls(self, mock_get_env, mock_is_feature_enabled)
│   │   │       └── test_compatibility_layer(self, mock_get_env, mock_is_feature_enabled)
│   │   ├── test_stripe_real_api.py
│   │   │   ├── StripeManager {}
│   │   │   │   ├── __init__(self)
│   │   │   │   ├── get_instance(cls)
│   │   │   │   ├── stripe(self)
│   │   │   │   ├── is_mock_mode(self)
│   │   │   │   ├── create_customer(self, email, name, metadata)
│   │   │   │   ├── retrieve_customer(self, customer_id)
│   │   │   │   ├── create_product(self, name, description, metadata)
│   │   │   │   ├── retrieve_product(self, product_id)
│   │   │   │   ├── list_products(self, active)
│   │   │   │   ├── update_product(self, product_id, name, description, metadata, active)
│   │   │   │   ├── get_product_prices(self, product_id, active)
│   │   │   │   └── create_price(self, product_id, unit_amount, currency, metadata)
│   │   │   ├── get_stripe_manager()
│   │   │   ├── webhook_endpoint(request)
│   │   │   ├── JsonResponse {}
│   │   │   │   └── __init__(self, data, status)
│   │   │   ├── stripe_test_mode()
│   │   │   └── TestStripeRealAPI {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_stripe_manager_initialization(self)
│   │   │       ├── test_create_customer_calls_real_api(self, mock_create)
│   │   │       ├── test_create_product_calls_real_api(self, mock_create)
│   │   │       ├── test_create_price_calls_real_api(self, mock_create)
│   │   │       ├── test_retrieve_product_calls_real_api(self, mock_retrieve)
│   │   │       ├── test_list_products_calls_real_api(self, mock_list)
│   │   │       └── test_webhook_handling(self, mock_construct_event)
│   │   ├── test_stripe_settings_validation.py
│   │   │   └── StripeSettingsValidationTest {}
│   │   │       ├── setUp(self)
│   │   │       ├── tearDown(self)
│   │   │       ├── test_stripe_disabled_by_default(self)
│   │   │       ├── test_settings_validation_with_missing_settings(self, mock_warning)
│   │   │       ├── test_settings_validation_with_valid_settings(self, mock_info)
│   │   │       └── test_settings_validation_with_partial_settings(self, mock_warning)
│   │   ├── test_system_commands.py
│   │   │   └── TestCheckCommand {}
│   │   │       ├── test_check_docker_compose_found(self)
│   │   │       ├── test_check_docker_compose_not_found_but_compose_v2_found(self)
│   │   │       ├── test_check_docker_compose_not_found(self)
│   │   │       ├── test_check_docker_compose_v2_errors_on_check(self)
│   │   │       ├── test_check_tool_found_docker(self)
│   │   │       ├── test_check_tool_found_python(self)
│   │   │       ├── test_check_tool_found_other(self)
│   │   │       ├── test_check_tool_version_error(self)
│   │   │       ├── test_check_tool_not_found(self)
│   │   │       ├── test_check_docker_daemon_running(self)
│   │   │       ├── test_check_docker_daemon_not_running(self)
│   │   │       ├── test_execute_all_requirements_met(self)
│   │   │       ├── test_execute_missing_docker_compose(self)
│   │   │       ├── test_execute_missing_docker(self)
│   │   │       ├── test_execute_missing_python(self)
│   │   │       └── test_execute_docker_daemon_not_running(self)
│   │   └── test_template_generator.py
│   │       └── TestTemplateGenerator {}
│   │           ├── setUp(self)
│   │           ├── tearDown(self)
│   │           ├── test_is_binary_file(self)
│   │           ├── test_render_template(self)
│   │           └── test_process_file_templates(self)
│   ├── users
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   │   └── Migration {}
│   │   │   └── __init__.py
│   │   ├── __init__.py
│   │   ├── adapters.py
│   │   │   ├── AccountAdapter {}
│   │   │   │   ├── is_open_for_signup(self, request)
│   │   │   │   ├── get_email_confirmation_url(self, request, emailconfirmation)
│   │   │   │   ├── get_login_redirect_url(self, request)
│   │   │   │   ├── send_mail(self, template_prefix, email, context)
│   │   │   │   └── populate_username(self, request, user)
│   │   │   └── SocialAccountAdapter {}
│   │   │       ├── is_open_for_signup(self, request, sociallogin)
│   │   │       ├── pre_social_login(self, request, sociallogin)
│   │   │       └── populate_user(self, request, sociallogin, data)
│   │   ├── apps.py
│   │   │   └── UsersConfig {}
│   │   ├── models.py
│   │   │   ├── CustomUserManager {}
│   │   │   │   ├── create_user(self, email, password)
│   │   │   │   └── create_superuser(self, email, password)
│   │   │   ├── CustomUser {}
│   │   │   │   ├── Meta {}
│   │   │   │   ├── __str__(self)
│   │   │   │   └── get_full_name(self)
│   │   │   └── StripeCustomer {}
│   │   │       ├── Meta {}
│   │   │       └── __str__(self)
│   │   └── validators.py
│   │       ├── PasswordStrengthValidator {}
│   │       │   ├── __init__(self, min_length, require_uppercase, require_lowercase, require_digit, require_special)
│   │       │   ├── validate(self, password, user)
│   │       │   └── get_help_text(self)
│   │       └── BreachedPasswordValidator {}
│   │           ├── __init__(self, min_pwned_count)
│   │           ├── validate(self, password, user)
│   │           └── get_help_text(self)
│   ├── utils
│   │   └── wait_for_tests.py
│   │       ├── is_port_open(host, port, timeout)
│   │       ├── check_container_logs(container_name)
│   │       ├── wait_for_service(host, port, container_name, max_attempts, delay)
│   │       └── main()
│   ├── README.md
│   ├── __init__.py
│   ├── conftest.py
│   │   ├── patch_django_for_bytes_path()
│   │   ├── setup_test_environment()
│   │   ├── chdir(path)
│   │   ├── cli_runner(monkeypatch, tmp_path)
│   │   ├── mock_config_file(tmp_path)
│   │   ├── wait_for_service()
│   │   ├── _cleanup_previous_instances(project_name)
│   │   ├── _initialize_test_project(project_name, tmp_path)
│   │   ├── _start_project_services(project_dir, web_port)
│   │   ├── _get_web_container_logs(project_name)
│   │   ├── _verify_containers_running(project_name)
│   │   ├── _cleanup_project(project_dir)
│   │   ├── real_project_fixture(tmp_path_factory)
│   │   ├── mock_docker()
│   │   ├── retry(request)
│   │   ├── check_docker_dependency(request)
│   │   ├── docker_ready(request)
│   │   ├── mock_stripe_disabled()
│   │   ├── mock_stripe_enabled()
│   │   └── mock_stripe_unavailable()
│   ├── debug_test.py
│   │   ├── validate_production_settings()
│   │   ├── test_secret_key()
│   │   ├── test_allowed_hosts()
│   │   ├── test_db_password()
│   │   └── test_email_tls()
│   └── utils.py
│       ├── is_port_open(host, port)
│       ├── find_available_port(start_port, end_port)
│       ├── find_available_ports(count, start_port, end_port)
│       ├── _check_port_connection(host, port)
│       ├── _log_connection_attempt(host, port, result, attempt)
│       ├── _check_port_usage(port)
│       ├── wait_for_port(host, port, timeout, interval)
│       ├── is_docker_service_running(service_name)
│       ├── wait_for_docker_service(service_name, timeout, interval)
│       ├── is_container_healthy(container_name)
│       ├── _try_container_health_check(container_name, alternative_name)
│       ├── _log_container_health_details(container_name, alternative_name, attempt)
│       ├── _check_and_log_container_state(container_name)
│       ├── _log_final_timeout_info()
│       ├── wait_for_container_health(container_name, timeout, interval)
│       ├── get_container_logs(container_name, tail)
│       ├── generate_random_name(prefix, length)
│       ├── create_test_project_structure(base_dir, project_name)
│       ├── change_directory(path)
│       ├── remove_project_dir(project_dir)
│       ├── capture_output()
│       ├── get_service_logs(service_name)
│       ├── _prepare_quickscale_command_args(args)
│       ├── _prepare_subprocess_kwargs(capture_output, env, timeout)
│       ├── _log_command_output(process_result)
│       ├── _handle_process_error(e, capture_output)
│       ├── _handle_timeout_error(e, cmd, timeout)
│       ├── _handle_os_error(e, cmd)
│       ├── run_quickscale_command()
│       ├── is_docker_available()
│       ├── _check_docker_installation()
│       ├── _check_docker_daemon()
│       ├── _check_docker_pull()
│       ├── _check_docker_run()
│       ├── _cleanup_test_container(container_id)
│       ├── check_docker_health()
│       ├── _get_container_inspect_info(container_name)
│       ├── _get_container_logs(container_name, timestamps)
│       ├── _get_container_error_logs(container_name)
│       ├── _get_container_stats(container_name)
│       ├── _get_related_container_status(container_name)
│       ├── _get_container_top_processes(container_name)
│       ├── _get_container_events(container_name, since_minutes)
│       ├── _get_container_restart_history(container_name)
│       ├── _get_host_system_info()
│       ├── capture_container_debug_info(container_name, output_dir)
│       └── init_test_project(tmp_path, project_name, env, check)
├── CHANGELOG.md
├── CONTRIBUTING.md
├── LICENSE
├── MANIFEST.in
├── README.md
├── ROADMAP.md
├── TECHNICAL_DOCS.md
├── USER_GUIDE.md
├── compile_docs.sh
├── pyproject.toml
├── pytest.ini
├── requirements-dev.txt
├── requirements-test.txt
├── run_tests.sh
└── setup.cfg