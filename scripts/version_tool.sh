#!/usr/bin/env bash
set -euo pipefail

# Unified version tool: check, sync, embed, apply
# Usage:
#   scripts/version_tool.sh check
#   scripts/version_tool.sh sync [--apply]
#   scripts/version_tool.sh embed
#   scripts/version_tool.sh apply

ROOT="$(cd "$(dirname "$0")/.." && pwd)"
VERSION_FILE="$ROOT/VERSION"

PYPROJECTS=("$ROOT/quickscale_core/pyproject.toml" "$ROOT/quickscale_cli/pyproject.toml" "$ROOT/quickscale/pyproject.toml")
PACKAGES=("$ROOT/quickscale_core/src/quickscale_core" "$ROOT/quickscale_cli/src/quickscale_cli")

read_version() {
  if [[ -f "$VERSION_FILE" ]]; then
    cat "$VERSION_FILE" | tr -d '\r' | sed -e 's/^\s*//' -e 's/\s*$//'
  else
    echo ""
  fi
}

get_pyproject_version() {
  local path="$1"
  if [[ -f "$path" ]]; then
    grep -m1 '^version' "$path" | sed -E 's/.*"([^"]+)".*/\1/' || true
  fi
}

update_pyproject() {
  local path="$1"; local version="$2"
  if [[ ! -f "$path" ]]; then
    echo "  (missing) $path"
    return 1
  fi
  local before; before=$(cat "$path")
  # Replace the first version = "..." occurrence (full match including old version)
  sed -E -i "0,/^version[[:space:]]*=[[:space:]]*\"[^\"]+\"/s//version = \"${version}\"/" "$path"
  local after; after=$(cat "$path")
  if [[ "$before" != "$after" ]]; then
    echo "  UPDATED: $path"
    return 0
  else
    echo "  NO-CHANGE: $path"
    return 2
  fi
}

update_internal_dependencies() {
  local version="$1"
  local path="$2"
  if [[ ! -f "$path" ]]; then
    return 1
  fi
  local before; before=$(cat "$path")
  # Update quickscale-core dependency constraint
  sed -E -i "s|^(quickscale-core[[:space:]]*=[[:space:]]*)\"\^[0-9]+\.[0-9]+\.[0-9]+\"|\1\"^${version}\"|" "$path"
  # Update quickscale-cli dependency constraint
  sed -E -i "s|^(quickscale-cli[[:space:]]*=[[:space:]]*)\"\^[0-9]+\.[0-9]+\.[0-9]+\"|\1\"^${version}\"|" "$path"
  local after; after=$(cat "$path")
  if [[ "$before" != "$after" ]]; then
    echo "  UPDATED DEPS: $path"
    return 0
  fi
  return 2
}

find_yaml_docs() {
  local out=()
  if [[ -d "$ROOT/docs" ]]; then
    while IFS= read -r -d $'\0' f; do
      # check for version: field in the file
      if grep -Eq '^\s*version\s*:' "$f"; then
        out+=("$f")
      fi
    done < <(find "$ROOT/docs" -type f \( -name '*.md' -o -name '*.yml' -o -name '*.yaml' \) -print0)
  fi
  printf '%s\n' "${out[@]:-}"
}

update_yaml_versions() {
  local version="$1"
  shift
  local updated=()
  for p in "$@"; do
    local before; before=$(cat "$p")
    sed -E -i "s|^(\s*version\s*:\s*).*|\1${version}|" "$p"
    local after; after=$(cat "$p")
    if [[ "$before" != "$after" ]]; then
      updated+=("$p")
      echo "  Updated YAML: $p"
    fi
  done
  return 0
}

embed_version_into_packages() {
  local version="$1"
  for pkg in "${PACKAGES[@]}"; do
    if [[ -d "$pkg" ]]; then
      local target="$pkg/_version.py"
      printf '%s\n' "# Auto-generated by scripts/version_tool.sh" "__version__ = \"${version}\"" > "$target"
      echo "Wrote $target"
    else
      echo "Package dir not found, skipping: $pkg"
    fi
  done
}

cmd_check() {
  local version; version=$(read_version)
  echo "Repository VERSION: ${version}"
  local ok=0
  for p in "${PYPROJECTS[@]}"; do
    if [[ -f "$p" ]]; then
      local pv; pv=$(get_pyproject_version "$p")
      echo "$p: pyproject version = ${pv}"
      if [[ "${pv}" != "${version}" ]]; then
        echo "  MISMATCH: ${p} != VERSION"
        ok=2
      fi
    else
      echo "$p: (missing)"
    fi
  done
  # local docs; docs=( $(find_yaml_docs) )
  # if [[ ${#docs[@]} -gt 0 ]]; then
  #   echo "Found ${#docs[@]} docs with version fields (sample):"
  #   for i in "${docs[@]:0:10}"; do echo " - $i"; done
  # else
  #   echo "No docs with version fields found"
  # fi
  return $ok
}

cmd_update() {
  local version; version=$(read_version)
  echo "Updating all files to version ${version}..."

  # Update pyproject.toml files
  for p in "${PYPROJECTS[@]}"; do
    update_pyproject "$p" "$version" || true
    update_internal_dependencies "$version" "$p" || true
  done

  # Update YAML docs
  mapfile -t yamls < <(find_yaml_docs)
  if [[ ${#yamls[@]} -gt 0 ]]; then
    update_yaml_versions "$version" "${yamls[@]}"
  fi

  # Embed into _version.py files
  embed_version_into_packages "$version"

  echo ""
  echo "âœ… All files updated to version ${version}"
  return 0
}

usage() {
  cat <<EOF
Usage: $0 <command>

Commands:
  check    Verify VERSION matches all pyproject.toml versions
  update   Update all files (pyproject.toml, dependencies, _version.py, docs) to VERSION

Examples:
  # After editing VERSION file, update everything:
  $0 update

  # Verify everything is in sync:
  $0 check

Workflow:
  1. Edit VERSION file with new version
  2. Run: $0 update
  3. Build/publish your packages
EOF
}

main() {
  if [[ $# -lt 1 ]]; then usage; exit 2; fi
  cmd="$1"; shift
  case "$cmd" in
    check)
      cmd_check || exit $? ;;
    update)
      cmd_update || exit $? ;;
    -h|--help|help)
      usage ;;
    *)
      echo "Unknown command: $cmd"; usage; exit 2 ;;
  esac
}

main "$@"
