"""
Tests for Sprint 24: Zero-Cost AI Services Implementation.

These tests verify that the zero-cost service implementation works correctly
across all components: model validation, service creation, credit consumption,
and CLI commands.

Note: These tests check the template files generated by QuickScale, not a running Django project.
"""

import unittest
import tempfile
import shutil
from pathlib import Path
from decimal import Decimal
from unittest.mock import patch, MagicMock, mock_open

# Import QuickScale modules
from quickscale.commands.service_generator_commands import ServiceGeneratorCommand
from quickscale.commands.command_manager import CommandManager


class TestZeroCostServiceTemplateValidation(unittest.TestCase):
    """Test cases for validating zero-cost service templates."""
    
    def setUp(self):
        """Set up test environment."""
        self.base_path = Path(__file__).parent.parent.parent
    
    def test_service_model_template_allows_zero_cost(self):
        """Test that Service model template allows 0.0 credit cost."""
        credits_models_path = self.base_path / 'quickscale' / 'templates' / 'credits' / 'models.py'
        
        with open(credits_models_path, 'r') as f:
            models_content = f.read()
        
        # Should allow MinValueValidator(Decimal('0.0'))
        self.assertIn("MinValueValidator(Decimal('0.0'))", models_content,
                     "Service model template does not allow zero credit cost")
        
        # Should have updated help text
        self.assertIn("0.0 for free services", models_content,
                     "Service model template help text does not mention free services")
        
        # Should have updated __str__ method for free services
        self.assertIn("if credit_cost == 0:", models_content,
                     "Service model template __str__ method does not handle zero cost")
    
    def test_service_model_template_validation_logic(self):
        """Test that Service model template has proper validation logic."""
        credits_models_path = self.base_path / 'quickscale' / 'templates' / 'credits' / 'models.py'
        
        with open(credits_models_path, 'r') as f:
            models_content = f.read()
        
        # Should still prevent negative costs
        self.assertIn("MinValueValidator", models_content,
                     "Service model template does not have minimum value validation")
        
        # Should have appropriate field definition
        self.assertIn("credit_cost = models.DecimalField", models_content,
                     "Service model template does not have credit_cost field")
        
        # Should have proper decimal configuration
        self.assertIn("decimal_places=2", models_content,
                     "Service model template does not have proper decimal places")
    
    def test_service_model_template_string_representation(self):
        """Test that Service model template has proper string representation."""
        credits_models_path = self.base_path / 'quickscale' / 'templates' / 'credits' / 'models.py'
        
        with open(credits_models_path, 'r') as f:
            models_content = f.read()
        
        # Should have __str__ method
        self.assertIn("def __str__(self):", models_content,
                     "Service model template does not have __str__ method")
        
        # Should handle free services in __str__
        self.assertIn('return f"{name} (Free)"', models_content,
                     "Service model template __str__ method does not handle free services")
        
        # Should handle paid services in __str__
        self.assertIn('return f"{name} ({credit_cost} credits)"', models_content,
                     "Service model template __str__ method does not handle paid services")


class TestZeroCostServiceBaseTemplate(unittest.TestCase):
    """Test cases for BaseService template with zero-cost services."""
    
    def setUp(self):
        """Set up test environment."""
        self.base_path = Path(__file__).parent.parent.parent
    
    def test_base_service_template_handles_zero_cost(self):
        """Test that BaseService template handles zero-cost services."""
        base_service_path = self.base_path / 'quickscale' / 'templates' / 'services' / 'base.py'
        
        with open(base_service_path, 'r') as f:
            base_content = f.read()
        
        # Should handle zero-cost services
        self.assertIn("if service.credit_cost == 0:", base_content,
                     "BaseService template does not handle zero-cost services")
        
        # Should create zero-amount transaction for tracking
        self.assertIn("amount=Decimal('0')", base_content,
                     "BaseService template does not create zero-amount transaction")
        
        # Should have appropriate description for free services
        self.assertIn("(free)", base_content,
                     "BaseService template description does not mention free services")
    
    def test_base_service_template_credit_consumption(self):
        """Test that BaseService template has proper credit consumption logic."""
        base_service_path = self.base_path / 'quickscale' / 'templates' / 'services' / 'base.py'
        
        with open(base_service_path, 'r') as f:
            base_content = f.read()
        
        # Should use priority credit consumption
        self.assertIn("consume_credits_with_priority", base_content,
                     "BaseService template does not use priority credit consumption")
        
        # Should create ServiceUsage records
        self.assertIn("ServiceUsage.objects.create", base_content,
                     "BaseService template does not create ServiceUsage records")
        
        # Should have proper user validation
        self.assertIn("if not isinstance(user, User):", base_content,
                     "BaseService template does not validate user")


class TestZeroCostServiceCLI(unittest.TestCase):
    """Test cases for CLI commands with zero-cost services."""
    
    def setUp(self):
        """Set up test environment."""
        self.test_dir = tempfile.mkdtemp()
        self.command = ServiceGeneratorCommand()
        
    def tearDown(self):
        """Clean up test environment."""
        shutil.rmtree(self.test_dir)
    
    @patch('quickscale.commands.service_generator_commands.MessageManager')
    def test_service_generator_with_free_flag(self, mock_message):
        """Test service generator with --free flag."""
        # Mock file operations
        with patch('builtins.open', mock_open()) as mock_file:
            with patch('pathlib.Path.exists', return_value=False):
                with patch('pathlib.Path.mkdir'):
                    # Mock the database configuration to avoid actual DB calls
                    with patch.object(self.command, '_configure_service_in_database') as mock_config:
                        mock_config.return_value = {"success": True}
                        
                        # Execute with free flag
                        result = self.command.execute(
                            service_name='free_test_service',
                            service_type='basic',
                            output_dir=self.test_dir,
                            free=True,
                            description='Free test service'
                        )
                        
                        # Verify credit cost is set to 0.0
                        self.assertEqual(result['credit_cost'], 0.0)
                        self.assertTrue(result['success'])
                        
                        # Verify database configuration was called with correct parameters
                        mock_config.assert_called_once_with(
                            'free_test_service',
                            'Free test service',
                            0.0
                        )
    
    @patch('quickscale.commands.service_generator_commands.MessageManager')
    def test_service_generator_free_overrides_credit_cost(self, mock_message):
        """Test that --free flag overrides --credit-cost."""
        # Mock file operations
        with patch('builtins.open', mock_open()) as mock_file:
            with patch('pathlib.Path.exists', return_value=False):
                with patch('pathlib.Path.mkdir'):
                    with patch.object(self.command, '_configure_service_in_database') as mock_config:
                        mock_config.return_value = {"success": True}
                        
                        # Execute with both free flag and credit cost
                        result = self.command.execute(
                            service_name='test_service',
                            service_type='basic',
                            output_dir=self.test_dir,
                            credit_cost=5.0,  # This should be overridden
                            free=True,
                            description='Test service'
                        )
                        
                        # Verify free flag overrides credit cost
                        self.assertEqual(result['credit_cost'], 0.0)
                        
                        # Verify database configuration was called with 0.0
                        mock_config.assert_called_once_with(
                            'test_service',
                            'Test service',
                            0.0
                        )


class TestZeroCostServiceFileValidation(unittest.TestCase):
    """Test cases for verifying file content includes zero-cost service support."""
    
    def setUp(self):
        """Set up test environment."""
        self.base_path = Path(__file__).parent.parent.parent
    
    def test_migration_exists_for_zero_cost(self):
        """Test that migration exists for zero-cost service support."""
        migrations_path = self.base_path / 'quickscale' / 'templates' / 'credits' / 'migrations'
        migration_file = migrations_path / '0008_allow_zero_cost_services.py'
        
        if migration_file.exists():
            with open(migration_file, 'r') as f:
                migration_content = f.read()
            
            # Should update Service model credit_cost field
            self.assertIn("model_name='service'", migration_content)
            self.assertIn("name='credit_cost'", migration_content)
            self.assertIn("MinValueValidator(Decimal('0.0'))", migration_content)
    
    def test_configure_service_command_supports_free_flag(self):
        """Test that configure_service management command supports --free flag."""
        command_path = self.base_path / 'quickscale' / 'templates' / 'services' / 'management' / 'commands' / 'configure_service.py'
        
        if command_path.exists():
            with open(command_path, 'r') as f:
                command_content = f.read()
            
            # Should have --free flag
            self.assertIn("'--free'", command_content)
            
            # Should handle free flag in logic
            self.assertIn("options['free']", command_content)
            
            # Should set credit_cost to 0.0 when free
            self.assertIn("credit_cost = Decimal('0.0')", command_content)
    
    def test_cli_supports_free_flag(self):
        """Test that CLI supports --free flag for generate-service command."""
        cli_path = self.base_path / 'quickscale' / 'cli.py'
        
        if cli_path.exists():
            with open(cli_path, 'r') as f:
                cli_content = f.read()
            
            # Should have --free argument
            self.assertIn("--free", cli_content)
            
            # Should have help text for free flag
            self.assertIn("Generate a free service", cli_content)


if __name__ == '__main__':
    unittest.main()